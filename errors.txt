

Webpack Bundle Analyzer saved report to /Users/david/Takk/Hub/projects/freedom-pos/.webpack/bundle-analysis-main.html
=============

WARNING: You are currently running a version of TypeScript which is not officially supported by @typescript-eslint/typescript-estree.

You may find that it works just fine, or you may not.

SUPPORTED TYPESCRIPT VERSIONS: >=4.3.5 <5.4.0

YOUR TYPESCRIPT VERSION: 5.7.3

Please only submit bug reports when using the officially supported version.

=============
Webpack Bundle Analyzer saved report to /Users/david/Takk/Hub/projects/freedom-pos/.webpack/bundle-analysis.html
Webpack Bundle Analyzer saved report to /Users/david/Takk/Hub/projects/freedom-pos/.webpack/bundle-analysis.html

An unhandled rejection has occurred inside Forge:
Error: Compilation errors in the preload: group_0:
  assets by chunk 652 KiB (id hint: defaultVendors)
    asset defaultVendors-node_modules_html-entities_lib_named-references_js/preload.js 367 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_webpack-dev-server_client_overlay_js-node_modules_webpack-dev-ser-1a662d/preload.js 127 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_webpack-dev-server_client_modules_logger_index_js/preload.js 81.4 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_ansi-html-community_index_js-node_modules_html-entities_lib_index-e27546/preload.js 76.6 KiB [emitted] (id hint: defaultVendors)
  asset main_window/preload.js 54.1 KiB [emitted] (name: main_window)
  asset index.html 718 bytes [emitted]
  Entrypoint main_window 706 KiB = defaultVendors-node_modules_ansi-html-community_index_js-node_modules_html-entities_lib_index-e27546/preload.js 76.6 KiB defaultVendors-node_modules_html-entities_lib_named-references_js/preload.js 367 KiB defaultVendors-node_modules_webpack-dev-server_client_modules_logger_index_js/preload.js 81.4 KiB defaultVendors-node_modules_webpack-dev-server_client_overlay_js-node_modules_webpack-dev-ser-1a662d/preload.js 127 KiB main_window/preload.js 54.1 KiB
  runtime modules 31.6 KiB 15 modules
  modules by path ./node_modules/ 200 KiB
    modules by path ./node_modules/webpack-dev-server/client/ 76.3 KiB 16 modules
    modules by path ./node_modules/webpack/hot/*.js 5.2 KiB
      ./node_modules/webpack/hot/dev-server.js 1.91 KiB [built] [code generated]
      ./node_modules/webpack/hot/log.js 1.75 KiB [built] [code generated]
      + 2 modules
    modules by path ./node_modules/html-entities/lib/*.js 114 KiB
      ./node_modules/html-entities/lib/index.js 5.72 KiB [built] [code generated]
      ./node_modules/html-entities/lib/named-references.js 107 KiB [built] [code generated]
      + 2 modules
    ./node_modules/ansi-html-community/index.js 4.25 KiB [built] [code generated]
  ./src/preload.ts 797 bytes [built] [code generated]
  external "electron" 42 bytes [built] [code generated]
  external "events" 42 bytes [built] [code generated]

  WARNING in DefinePlugin
  Conflicting values for 'process.env.NODE_ENV'

  WARNING in SplitChunksPlugin
  Cache group defaultVendors
  Configured minSize (19.5 KiB) is bigger than maxSize (0 bytes).
  This seem to be a invalid optimization.splitChunks configuration.

  WARNING in SplitChunksPlugin
  Fallback cache group
  Configured minSize (19.5 KiB) is bigger than maxSize (0 bytes).
  This seem to be a invalid optimization.splitChunks configuration.

  1 WARNING in child compilations (Use 'stats.children: true' resp. '--stats-children' for more details)

  1 warning has detailed information that is not shown.
  Use 'stats.errorDetails: true' resp. '--stats-error-details' to show it.

  ERROR in [eslint] prettier.resolveConfig.sync is not a function
  Occurred while linting /Users/david/Takk/Hub/projects/freedom-pos/src/preload.ts:1
  Rule: "prettier/prettier"

  ERROR in unable to locate '/Users/david/Takk/Hub/projects/freedom-pos/src/assets' glob

  ERROR in unable to locate '/Users/david/Takk/Hub/projects/freedom-pos/src/locales' glob

  ERROR in src/database/accountService.ts:96:18
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      94 |     .sum('amount as total')
      95 |     .first();
    > 96 |   return result?.total ?? 0;
         |                  ^^^^^
      97 | }
      98 |
      99 | export async function getTotalPayables(): Promise<number> {

  ERROR in src/database/accountService.ts:105:18
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      103 |     .sum('amount as total')
      104 |     .first();
    > 105 |   return result?.total ?? 0;
          |                  ^^^^^
      106 | }
      107 |

  ERROR in src/database/appointmentService.ts:70:3
  TS2739: Type '{ id: any; customerId: any; date: any; status: AppointmentStatus; notes: any; createdAt: any; }' is missing the following properties from type 'Appointment': serviceId, duration
      68 |
      69 | function mapAppointment(result: any): Appointment {
    > 70 |   return {
         |   ^^^^^^
      71 |     id: result.id,
      72 |     customerId: result.customerId,
      73 |     date: result.date,

  ERROR in src/database/db.ts:187:30
  TS2724: 'knex' has no exported member named 'CreateTableBuilder'. Did you mean 'TableBuilder'?
      185 | async function createTableIfNotExists(
      186 |   tableName: string,
    > 187 |   tableBuilder: (table: Knex.CreateTableBuilder) => void,
          |                              ^^^^^^^^^^^^^^^^^^
      188 | ): Promise<void> {
      189 |   const exists = await knex.schema.hasTable(tableName);
      190 |   if (!exists) {

  ERROR in src/database/discountService.ts:40:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; productId: any; percentage: any; startDate: any; endDate: any; }' but required in type 'Discount'.
      38 |
      39 | function mapDiscount(result: any): Discount {
    > 40 |   return {
         |   ^^^^^^
      41 |     id: result.id,
      42 |     productId: result.productId,
      43 |     percentage: result.percentage,

  ERROR in src/database/integrationService.ts:31:5
  TS2561: Object literal may only specify known properties, but 'quickbooksAccessToken' does not exist in type 'IntegrationSettings'. Did you mean to write 'quickbooksTokens'?
      29 |   return {
      30 |     quickbooksEnabled: result.quickbooksEnabled,
    > 31 |     quickbooksAccessToken: result.quickbooksAccessToken,
         |     ^^^^^^^^^^^^^^^^^^^^^
      32 |     quickbooksRefreshToken: result.quickbooksRefreshToken,
      33 |     xeroEnabled: result.xeroEnabled,
      34 |     xeroAccessToken: result.xeroAccessToken,

  ERROR in src/database/integrationService.ts:42:5
  TS2561: Object literal may only specify known properties, but 'quickbooksAccessToken' does not exist in type 'IntegrationSettings'. Did you mean to write 'quickbooksTokens'?
      40 |   return {
      41 |     quickbooksEnabled: false,
    > 42 |     quickbooksAccessToken: '',
         |     ^^^^^^^^^^^^^^^^^^^^^
      43 |     quickbooksRefreshToken: '',
      44 |     xeroEnabled: false,
      45 |     xeroAccessToken: '',

  ERROR in src/database/inventoryService.ts:4:10
  TS2305: Module '"knex"' has no exported member 'Transaction'.
      2 | import { Product } from '../shared/types/product';
      3 | import * as XLSX from 'xlsx';
    > 4 | import { Transaction } from 'knex';
        |          ^^^^^^^^^^^
      5 |
      6 | type Dict<T> = { [key: string | number]: T };
      7 |

  ERROR in src/database/inventoryService.ts:6:6
  TS6196: 'Dict' is declared but never used.
      4 | import { Transaction } from 'knex';
      5 |
    > 6 | type Dict<T> = { [key: string | number]: T };
        |      ^^^^
      7 |
      8 | export async function importProductsFromXLS(filePath: string): Promise<void> {
      9 |   const workbook = XLSX.readFile(filePath);

  ERROR in src/database/inventoryService.ts:11:33
  TS2538: Type 'undefined' cannot be used as an index type.
       9 |   const workbook = XLSX.readFile(filePath);
      10 |   const sheetName = workbook.SheetNames[0];
    > 11 |   const sheet = workbook.Sheets[sheetName];
         |                                 ^^^^^^^^^
      12 |   const products: Product[] = XLSX.utils.sheet_to_json(sheet);
      13 |
      14 |   await knex.transaction(async (trx) => {

  ERROR in src/database/orderService.ts:87:3
  TS2739: Type '{ productId: any; name: any; quantity: any; notes: any; }' is missing the following properties from type 'OrderItem': id, unitPrice, subtotal, tax, total
      85 |
      86 | function mapOrderItem(result: any): OrderItem {
    > 87 |   return {
         |   ^^^^^^
      88 |     productId: result.productId,
      89 |     name: result.name,
      90 |     quantity: result.quantity,

  ERROR in src/database/productService.ts:135:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; productId: any; percentage: any; startDate: any; endDate: any; }' but required in type 'Discount'.
      133 |
      134 | function mapDiscount(result: any): Discount {
    > 135 |   return {
          |   ^^^^^^
      136 |     id: result.id,
      137 |     productId: result.productId,
      138 |     percentage: result.percentage,

  ERROR in src/database/productService.ts:145:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; name: any; }' but required in type 'Category'.
      143 |
      144 | function mapCategory(result: any): Category {
    > 145 |   return {
          |   ^^^^^^
      146 |     id: result.id,
      147 |     name: result.name,
      148 |   };

  ERROR in src/database/quoteService.ts:98:3
  TS2741: Property 'status' is missing in type '{ id: any; customerId: any; subtotal: any; tax: any; total: any; expirationDate: any; notes: any; createdAt: any; }' but required in type 'Omit<Quote, "items">'.
       96 |
       97 | function mapQuote(result: any): Omit<Quote, 'items'> {
    >  98 |   return {
          |   ^^^^^^
       99 |     id: result.id,
      100 |     customerId: result.customerId,
      101 |     subtotal: result.subtotal,

  ERROR in src/database/quoteService.ts:111:3
  TS2739: Type '{ productId: any; name: any; quantity: any; unitPrice: any; discount: any; }' is missing the following properties from type 'QuoteItem': id, subtotal, tax, total
      109 |
      110 | function mapQuoteItem(result: any): QuoteItem {
    > 111 |   return {
          |   ^^^^^^
      112 |     productId: result.productId,
      113 |     name: result.name,
      114 |     quantity: result.quantity,

  ERROR in src/database/reportService.ts:2:1
  TS6133: 'Dict' is declared but its value is never read.
      1 | import knex from './db';
    > 2 | import { Dict } from '../shared/types/common';
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      3 |
      4 | // Interfaces remain unchanged
      5 |

  ERROR in src/database/reportService.ts:2:22
  TS2307: Cannot find module '../shared/types/common' or its corresponding type declarations.
      1 | import knex from './db';
    > 2 | import { Dict } from '../shared/types/common';
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^
      3 |
      4 | // Interfaces remain unchanged
      5 |

  ERROR in src/database/reportService.ts:6:64
  TS2304: Cannot find name 'SalesReport'.
      4 | // Interfaces remain unchanged
      5 |
    > 6 | export async function getDailySalesReport(date: Date): Promise<SalesReport> {
        |                                                                ^^^^^^^^^^^
      7 |   const startOfDay = new Date(date);
      8 |   startOfDay.setHours(0, 0, 0, 0);
      9 |   const endOfDay = new Date(date);

  ERROR in src/database/reportService.ts:35:70
  TS2304: Cannot find name 'SalesReport'.
      33 | }
      34 |
    > 35 | export async function getWeeklySalesReport(startDate: Date): Promise<SalesReport[]> {
         |                                                                      ^^^^^^^^^^^
      36 |   const endDate = new Date(startDate);
      37 |   endDate.setDate(endDate.getDate() + 6);
      38 |

  ERROR in src/database/reportService.ts:50:26
  TS7006: Parameter 'data' implicitly has an 'any' type.
      48 |
      49 |   return Promise.all(
    > 50 |     salesData.map(async (data) => ({
         |                          ^^^^
      51 |       date: new Date(data.date),
      52 |       totalSales: Number(data.totalSales) || 0,
      53 |       totalTax: Number(data.totalTax) || 0,

  ERROR in src/database/reportService.ts:64:16
  TS6133: 'calculateInventoryTurnover' is declared but its value is never read.
      62 | // Other functions remain largely unchanged, with camelCase adjustments
      63 |
    > 64 | async function calculateInventoryTurnover(date: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      65 |   const yearStart = new Date(date.getFullYear(), 0, 1);
      66 |   const costOfGoodsSold = await knex('salesItems')
      67 |     .join('products', 'salesItems.productId', 'products.id')

  ERROR in src/database/reportService.ts:73:57
  TS4111: Property 'totalCost' comes from an index signature, so it must be accessed with ['totalCost'].
      71 |
      72 |   const averageInventory = await calculateAverageInventoryValue(date);
    > 73 |   return averageInventory > 0 ? Number(costOfGoodsSold?.totalCost || 0) / averageInventory : 0;
         |                                                         ^^^^^^^^^
      74 | }
      75 |
      76 | async function calculateAverageInventoryValue(date: Date): Promise<number> {

  ERROR in src/database/reportService.ts:82:25
  TS4111: Property 'avgValue' comes from an index signature, so it must be accessed with ['avgValue'].
      80 |     .avg('totalValue as avgValue')
      81 |     .first();
    > 82 |   return Number(result?.avgValue || 0);
         |                         ^^^^^^^^
      83 | }
      84 |
      85 | async function getCustomerCount(startDate: Date, endDate: Date): Promise<number> {

  ERROR in src/database/reportService.ts:85:16
  TS6133: 'getCustomerCount' is declared but its value is never read.
      83 | }
      84 |
    > 85 | async function getCustomerCount(startDate: Date, endDate: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^
      86 |   const result = await knex('customers')
      87 |     .whereBetween('createdAt', [startDate, endDate])
      88 |     .count('* as count')

  ERROR in src/database/reportService.ts:90:25
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      88 |     .count('* as count')
      89 |     .first();
    > 90 |   return Number(result?.count || 0);
         |                         ^^^^^
      91 | }
      92 |
      93 | async function calculateCustomerRetention(startDate: Date, endDate: Date): Promise<number> {

  ERROR in src/database/reportService.ts:93:16
  TS6133: 'calculateCustomerRetention' is declared but its value is never read.
      91 | }
      92 |
    > 93 | async function calculateCustomerRetention(startDate: Date, endDate: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      94 |   const previousPeriod = new Date(startDate.getTime() - (endDate.getTime() - startDate.getTime()));
      95 |
      96 |   const previousCustomers = await knex('sales')

  ERROR in src/database/reportService.ts:113:16
  TS6133: 'calculateAverageOrderValue' is declared but its value is never read.
      111 | }
      112 |
    > 113 | async function calculateAverageOrderValue(startDate: Date, endDate: Date): Promise<number> {
          |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      114 |   const result = await knex('sales')
      115 |     .whereBetween('createdAt', [startDate, endDate])
      116 |     .avg('total as avgValue')

  ERROR in src/database/reportService.ts:118:25
  TS4111: Property 'avgValue' comes from an index signature, so it must be accessed with ['avgValue'].
      116 |     .avg('total as avgValue')
      117 |     .first();
    > 118 |   return Number(result?.avgValue || 0);
          |                         ^^^^^^^^
      119 | }
      120 |
      121 | async function getPeakHours(

  ERROR in src/database/reportService.ts:121:16
  TS6133: 'getPeakHours' is declared but its value is never read.
      119 | }
      120 |
    > 121 | async function getPeakHours(
          |                ^^^^^^^^^^^^
      122 |   startDate: Date,
      123 |   endDate: Date,
      124 | ): Promise<Array<{ hour: number; sales: number }>> {

  ERROR in src/database/reportService.ts:133:22
  TS4111: Property 'hour' comes from an index signature, so it must be accessed with ['hour'].
      131 |
      132 |   return results.map((row) => ({
    > 133 |     hour: Number(row.hour),
          |                      ^^^^
      134 |     sales: Number(row.sales),
      135 |   }));
      136 | }

  ERROR in src/database/reportService.ts:134:23
  TS4111: Property 'sales' comes from an index signature, so it must be accessed with ['sales'].
      132 |   return results.map((row) => ({
      133 |     hour: Number(row.hour),
    > 134 |     sales: Number(row.sales),
          |                       ^^^^^
      135 |   }));
      136 | }
      137 |

  ERROR in src/database/reportService.ts:169:22
  TS4111: Property 'hour' comes from an index signature, so it must be accessed with ['hour'].
      167 |
      168 |   return results.map((row) => ({
    > 169 |     hour: Number(row.hour),
          |                      ^^^^
      170 |     sales: Number(row.sales),
      171 |   }));
      172 | }

  ERROR in src/database/reportService.ts:170:23
  TS4111: Property 'sales' comes from an index signature, so it must be accessed with ['sales'].
      168 |   return results.map((row) => ({
      169 |     hour: Number(row.hour),
    > 170 |     sales: Number(row.sales),
          |                       ^^^^^
      171 |   }));
      172 | }
      173 |

  ERROR in src/database/reportService.ts:174:16
  TS6133: 'calculateTotalTax' is declared but its value is never read.
      172 | }
      173 |
    > 174 | async function calculateTotalTax(startDate: Date, endDate: Date): Promise<number> {
          |                ^^^^^^^^^^^^^^^^^
      175 |   const result = await knex('sales')
      176 |     .whereBetween('createdAt', [startDate, endDate])
      177 |     .sum('tax as totalTax')

  ERROR in src/database/reportService.ts:179:25
  TS4111: Property 'totalTax' comes from an index signature, so it must be accessed with ['totalTax'].
      177 |     .sum('tax as totalTax')
      178 |     .first();
    > 179 |   return Number(result?.totalTax || 0);
          |                         ^^^^^^^^
      180 | }
      181 |
      182 | async function calculateCashFlow(

  ERROR in src/database/reportService.ts:182:16
  TS6133: 'calculateCashFlow' is declared but its value is never read.
      180 | }
      181 |
    > 182 | async function calculateCashFlow(
          |                ^^^^^^^^^^^^^^^^^
      183 |   startDate: Date,
      184 |   endDate: Date,
      185 | ): Promise<{ opening: number; closing: number; netChange: number }> {

  ERROR in src/database/reportService.ts:215:16
  TS6133: 'calculateEmployeePerformance' is declared but its value is never read.
      213 | }
      214 |
    > 215 | async function calculateEmployeePerformance(
          |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      216 |   startDate: Date,
      217 |   endDate: Date,
      218 | ): Promise<EmployeePerformance[]> {

  ERROR in src/database/reportService.ts:218:12
  TS2304: Cannot find name 'EmployeePerformance'.
      216 |   startDate: Date,
      217 |   endDate: Date,
    > 218 | ): Promise<EmployeePerformance[]> {
          |            ^^^^^^^^^^^^^^^^^^^
      219 |   const results = await knex('sales')
      220 |     .join('employees', 'sales.employeeId', 'employees.id')
      221 |     .whereBetween('sales.createdAt', [startDate, endDate])

  ERROR in src/database/salesService.ts:41:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      39 |   });
      40 |
    > 41 |   return saleId;
         |   ^^^^^^
      42 | }
      43 |
      44 | export async function getSaleById(saleId: number): Promise<Sale | null> {

  ERROR in src/database/salesService.ts:54:9
  TS2741: Property 'status' is missing in type '{ id: any; total: number; subtotal: number; tax: number; paymentMethod: any; customerId: any; createdAt: Date; items: SaleItem[]; }' but required in type 'Sale'.
      52 |     .select('saleItems.*', 'products.name');
      53 |
    > 54 |   const sale: Sale = {
         |         ^^^^
      55 |     id: saleData.id,
      56 |     total: Number(saleData.total),
      57 |     subtotal: Number(saleData.subtotal),

  ERROR in src/database/salesService.ts:91:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      89 |
      90 |   return {
    > 91 |     count: Number(result?.count || 0),
         |                           ^^^^^
      92 |     total: Number(result?.total || 0),
      93 |   };
      94 | }

  ERROR in src/database/salesService.ts:92:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      90 |   return {
      91 |     count: Number(result?.count || 0),
    > 92 |     total: Number(result?.total || 0),
         |                           ^^^^^
      93 |   };
      94 | }
      95 |

  ERROR in src/database/salesService.ts:107:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      105 |
      106 |   return {
    > 107 |     count: Number(result?.count || 0),
          |                           ^^^^^
      108 |     total: Number(result?.total || 0),
      109 |   };
      110 | }

  ERROR in src/database/salesService.ts:108:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      106 |   return {
      107 |     count: Number(result?.count || 0),
    > 108 |     total: Number(result?.total || 0),
          |                           ^^^^^
      109 |   };
      110 | }
      111 |

  ERROR in src/database/salesService.ts:124:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      122 |
      123 |   return {
    > 124 |     count: Number(result?.count || 0),
          |                           ^^^^^
      125 |     total: Number(result?.total || 0),
      126 |   };
      127 | }

  ERROR in src/database/salesService.ts:125:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      123 |   return {
      124 |     count: Number(result?.count || 0),
    > 125 |     total: Number(result?.total || 0),
          |                           ^^^^^
      126 |   };
      127 | }
      128 |

  ERROR in src/database/salesService.ts:141:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      139 |
      140 |   return {
    > 141 |     count: Number(result?.count || 0),
          |                           ^^^^^
      142 |     total: Number(result?.total || 0),
      143 |   };
      144 | }

  ERROR in src/database/salesService.ts:142:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      140 |   return {
      141 |     count: Number(result?.count || 0),
    > 142 |     total: Number(result?.total || 0),
          |                           ^^^^^
      143 |   };
      144 | }
      145 |

  ERROR in src/database/salesService.ts:159:3
  TS2739: Type '{ saleId: number; businessName: string; businessAddress: string; customerName: string; items: SaleItem[]; subtotal: number; tax: number; total: number; paymentMethod: PaymentMethod; createdAt: Date; guaranteeText: any; customMessage: any; }' is missing the following properties from type 'Invoice': id, isPaid
      157 |   }
      158 |
    > 159 |   return {
          |   ^^^^^^
      160 |     saleId: sale.id,
      161 |     businessName: settings.businessName,
      162 |     businessAddress: settings.businessAddress,

  ERROR in src/database/salesService.ts:170:29
  TS2551: Property 'guaranteeText' does not exist on type 'Settings'. Did you mean 'guarantee'?
      168 |     paymentMethod: sale.paymentMethod,
      169 |     createdAt: sale.createdAt,
    > 170 |     guaranteeText: settings.guaranteeText || '',
          |                             ^^^^^^^^^^^^^
      171 |     customMessage: settings.invoiceCustomMessage || '',
      172 |   };
      173 | }

  ERROR in src/database/salesService.ts:171:29
  TS2551: Property 'invoiceCustomMessage' does not exist on type 'Settings'. Did you mean 'invoiceMessage'?
      169 |     createdAt: sale.createdAt,
      170 |     guaranteeText: settings.guaranteeText || '',
    > 171 |     customMessage: settings.invoiceCustomMessage || '',
          |                             ^^^^^^^^^^^^^^^^^^^^
      172 |   };
      173 | }
      174 |

  ERROR in src/database/salesService.ts:187:18
  TS4111: Property 'productId' comes from an index signature, so it must be accessed with ['productId'].
      185 |
      186 |   return topProducts.map((p) => ({
    > 187 |     productId: p.productId,
          |                  ^^^^^^^^^
      188 |     name: p.name,
      189 |     totalSold: Number(p.totalSold),
      190 |   }));

  ERROR in src/database/salesService.ts:188:13
  TS4111: Property 'name' comes from an index signature, so it must be accessed with ['name'].
      186 |   return topProducts.map((p) => ({
      187 |     productId: p.productId,
    > 188 |     name: p.name,
          |             ^^^^
      189 |     totalSold: Number(p.totalSold),
      190 |   }));
      191 | }

  ERROR in src/database/salesService.ts:189:25
  TS4111: Property 'totalSold' comes from an index signature, so it must be accessed with ['totalSold'].
      187 |     productId: p.productId,
      188 |     name: p.name,
    > 189 |     totalSold: Number(p.totalSold),
          |                         ^^^^^^^^^
      190 |   }));
      191 | }
      192 |

  ERROR in src/database/salesService.ts:205:18
  TS4111: Property 'productId' comes from an index signature, so it must be accessed with ['productId'].
      203 |
      204 |   return leastProducts.map((p) => ({
    > 205 |     productId: p.productId,
          |                  ^^^^^^^^^
      206 |     name: p.name,
      207 |     totalSold: Number(p.totalSold),
      208 |   }));

  ERROR in src/database/salesService.ts:206:13
  TS4111: Property 'name' comes from an index signature, so it must be accessed with ['name'].
      204 |   return leastProducts.map((p) => ({
      205 |     productId: p.productId,
    > 206 |     name: p.name,
          |             ^^^^
      207 |     totalSold: Number(p.totalSold),
      208 |   }));
      209 | }

  ERROR in src/database/salesService.ts:207:25
  TS4111: Property 'totalSold' comes from an index signature, so it must be accessed with ['totalSold'].
      205 |     productId: p.productId,
      206 |     name: p.name,
    > 207 |     totalSold: Number(p.totalSold),
          |                         ^^^^^^^^^
      208 |   }));
      209 | }
      210 |

  ERROR in src/database/salesService.ts:219:24
  TS2339: Property 'expiresAt' does not exist on type 'Omit<Quote, "id">'.
      217 |       total: quote.total,
      218 |       createdAt: quote.createdAt,
    > 219 |       expiresAt: quote.expiresAt,
          |                        ^^^^^^^^^
      220 |       notes: quote.notes,
      221 |     });
      222 |

  ERROR in src/database/salesService.ts:228:21
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      226 |         productId: item.productId,
      227 |         quantity: item.quantity,
    > 228 |         price: item.price,
          |                     ^^^^^
      229 |         discount: item.discount || 0,
      230 |       })),
      231 |     );

  ERROR in src/database/salesService.ts:236:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      234 |   });
      235 |
    > 236 |   return quoteId;
          |   ^^^^^^
      237 | }
      238 |
      239 | export async function getQuoteById(quoteId: number): Promise<Quote | null> {

  ERROR in src/database/salesService.ts:258:5
  TS2353: Object literal may only specify known properties, and 'expiresAt' does not exist in type 'Quote'.
      256 |     total: Number(quoteData.total),
      257 |     createdAt: new Date(quoteData.createdAt),
    > 258 |     expiresAt: new Date(quoteData.expiresAt),
          |     ^^^^^^^^^
      259 |     notes: quoteData.notes,
      260 |     items: quoteItems.map(
      261 |       (item): QuoteItem => ({

  ERROR in src/database/salesService.ts:264:9
  TS2353: Object literal may only specify known properties, and 'price' does not exist in type 'QuoteItem'.
      262 |         productId: item.productId,
      263 |         name: item.name,
    > 264 |         price: Number(item.price),
          |         ^^^^^
      265 |         quantity: Number(item.quantity),
      266 |         discount: Number(item.discount || 0),
      267 |         subtotal: Number(item.price) * Number(item.quantity),

  ERROR in src/database/salesService.ts:281:24
  TS2339: Property 'expiresAt' does not exist on type 'Quote'.
      279 |       tax: quote.tax,
      280 |       total: quote.total,
    > 281 |       expiresAt: quote.expiresAt,
          |                        ^^^^^^^^^
      282 |       notes: quote.notes,
      283 |     });
      284 |

  ERROR in src/database/salesService.ts:292:21
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      290 |         productId: item.productId,
      291 |         quantity: item.quantity,
    > 292 |         price: item.price,
          |                     ^^^^^
      293 |         discount: item.discount || 0,
      294 |       })),
      295 |     );

  ERROR in src/database/salesService.ts:309:22
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      307 |   const [refundId] = await knex.transaction(async (trx: Knex.Transaction) => {
      308 |     const [id] = await trx('refunds').insert({
    > 309 |       saleId: refund.saleId,
          |                      ^^^^^^
      310 |       amount: refund.amount,
      311 |       reason: refund.reason,
      312 |       createdAt: refund.createdAt,

  ERROR in src/database/salesService.ts:315:43
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      313 |     });
      314 |
    > 315 |     await trx('sales').where('id', refund.saleId).decrement('total', refund.amount);
          |                                           ^^^^^^
      316 |
      317 |     const sale = await getSaleById(refund.saleId);
      318 |     if (sale) {

  ERROR in src/database/salesService.ts:317:43
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      315 |     await trx('sales').where('id', refund.saleId).decrement('total', refund.amount);
      316 |
    > 317 |     const sale = await getSaleById(refund.saleId);
          |                                           ^^^^^^
      318 |     if (sale) {
      319 |       for (const item of sale.items) {
      320 |         await updateProductStock(item.productId, item.quantity, trx);

  ERROR in src/database/salesService.ts:327:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      325 |   });
      326 |
    > 327 |   return refundId;
          |   ^^^^^^
      328 | }
      329 |
      330 | export async function getRefundById(refundId: number): Promise<Refund | null> {

  ERROR in src/database/salesService.ts:377:41
  TS4111: Property 'totalRefunds' comes from an index signature, so it must be accessed with ['totalRefunds'].
      375 |   const cashSales = Number(salesResult?.cashSales || 0);
      376 |   const cardSales = Number(salesResult?.cardSales || 0);
    > 377 |   const refunds = Number(refundsResult?.totalRefunds || 0);
          |                                         ^^^^^^^^^^^^
      378 |   const netTotal = totalSales - refunds;
      379 |
      380 |   return {

  ERROR in src/database/subscriptionService.ts:23:3
  TS2739: Type '{ id: any; customerId: any; planType: any; startDate: Date; endDate: Date; status: any; createdAt: Date; }' is missing the following properties from type 'Subscription': price, paymentFrequency, autoRenew
      21 |
      22 | function mapSubscription(result: any): Subscription {
    > 23 |   return {
         |   ^^^^^^
      24 |     id: result.id,
      25 |     customerId: result.customerId,
      26 |     planType: result.planType,

  ERROR in src/database/userService.ts:60:5
  TS2322: Type 'Date | null' is not assignable to type 'Date'.
    Type 'null' is not assignable to type 'Date'.
      58 |     password: result.password,
      59 |     role: result.role,
    > 60 |     lastLogin: result.lastLogin ? new Date(result.lastLogin) : null,
         |     ^^^^^^^^^
      61 |     createdAt: new Date(result.createdAt),
      62 |   };
      63 | }

  ERROR in src/index.ts:1:30
  TS6133: 'ipcMain' is declared but its value is never read.
    > 1 | import { app, BrowserWindow, ipcMain } from 'electron';
        |                              ^^^^^^^
      2 | import isDev from 'electron-is-dev';
      3 | import * as path from 'path';
      4 |

  ERROR in src/main/main.ts:11:10
  TS2305: Module '"../utils/userManual"' has no exported member 'exportUserManual'.
       9 | import { createUser, validateUser } from '../database/userService';
      10 | import { getSettings, updateSettings } from '../database/settingsService';
    > 11 | import { exportUserManual } from '../utils/userManual';
         |          ^^^^^^^^^^^^^^^^
      12 | import { setupI18n } from '../utils/i18n';
      13 | import { generateReport } from '../database/reportService';
      14 | import { createQuote, updateQuote, deleteQuote, createRefund } from '../database/salesService';

  ERROR in src/main/main.ts:13:10
  TS2305: Module '"../database/reportService"' has no exported member 'generateReport'.
      11 | import { exportUserManual } from '../utils/userManual';
      12 | import { setupI18n } from '../utils/i18n';
    > 13 | import { generateReport } from '../database/reportService';
         |          ^^^^^^^^^^^^^^
      14 | import { createQuote, updateQuote, deleteQuote, createRefund } from '../database/salesService';
      15 | import { Order, OrderStatus } from '../shared/types/order';
      16 | import { Appointment } from '../shared/types/appointment';

  ERROR in src/main/main.ts:130:26
  TS2345: Argument of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/shared/types/settings").Settings' is not assignable to parameter of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings'.
    Types of property 'theme' are incompatible.
      Type 'Theme' is not assignable to type '"light" | "dark"'.
        Type '"system"' is not assignable to type '"light" | "dark"'.
      128 | ipcMain.handle('update-settings', async (_, settings: Settings) => {
      129 |   try {
    > 130 |     await updateSettings(settings);
          |                          ^^^^^^^^
      131 |     return { success: true, message: 'Settings updated successfully' };
      132 |   } catch (error) {
      133 |     console.error('Failed to update settings:', error);

  ERROR in src/renderer/App.tsx:6:25
  TS2307: Cannot find module './pages/QuoteSystem' or its corresponding type declarations.
      4 | import Reports from './pages/Reports';
      5 | import Sales from './pages/Sales';
    > 6 | import QuoteSystem from './pages/QuoteSystem';
        |                         ^^^^^^^^^^^^^^^^^^^^^
      7 | import OrderSystem from './pages/OrderSystem';
      8 | import AppointmentSystem from './pages/AppointmentSystem';
      9 | import RefundSystem from './pages/RefundSystem';

  ERROR in src/renderer/App.tsx:7:25
  TS2307: Cannot find module './pages/OrderSystem' or its corresponding type declarations.
       5 | import Sales from './pages/Sales';
       6 | import QuoteSystem from './pages/QuoteSystem';
    >  7 | import OrderSystem from './pages/OrderSystem';
         |                         ^^^^^^^^^^^^^^^^^^^^^
       8 | import AppointmentSystem from './pages/AppointmentSystem';
       9 | import RefundSystem from './pages/RefundSystem';
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';

  ERROR in src/renderer/App.tsx:8:31
  TS2307: Cannot find module './pages/AppointmentSystem' or its corresponding type declarations.
       6 | import QuoteSystem from './pages/QuoteSystem';
       7 | import OrderSystem from './pages/OrderSystem';
    >  8 | import AppointmentSystem from './pages/AppointmentSystem';
         |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
       9 | import RefundSystem from './pages/RefundSystem';
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';
      11 | import Settings from './pages/Settings';

  ERROR in src/renderer/App.tsx:9:26
  TS2307: Cannot find module './pages/RefundSystem' or its corresponding type declarations.
       7 | import OrderSystem from './pages/OrderSystem';
       8 | import AppointmentSystem from './pages/AppointmentSystem';
    >  9 | import RefundSystem from './pages/RefundSystem';
         |                          ^^^^^^^^^^^^^^^^^^^^^^
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';
      11 | import Settings from './pages/Settings';
      12 |

  ERROR in src/renderer/App.tsx:10:32
  TS2307: Cannot find module './pages/SubscriptionSystem' or its corresponding type declarations.
       8 | import AppointmentSystem from './pages/AppointmentSystem';
       9 | import RefundSystem from './pages/RefundSystem';
    > 10 | import SubscriptionSystem from './pages/SubscriptionSystem';
         |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      11 | import Settings from './pages/Settings';
      12 |
      13 | function App() {

  ERROR in src/renderer/components/InventorySystem.tsx:9:3
  TS2305: Module '"../../database/productService"' has no exported member 'importProductsFromXLS'.
       7 |   updateProduct,
       8 |   deleteProduct,
    >  9 |   importProductsFromXLS,
         |   ^^^^^^^^^^^^^^^^^^^^^
      10 | } from '../../database/productService';
      11 | import { Button } from './ui/button';
      12 | import { Input } from './ui/input';

  ERROR in src/renderer/components/InventorySystem.tsx:14:10
  TS2305: Module '"../../utils/barcodeGenerator"' has no exported member 'generateBarcode'.
      12 | import { Input } from './ui/input';
      13 | import { toast } from './ui/toast';
    > 14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
         |          ^^^^^^^^^^^^^^^
      15 | import { Select, Option } from './ui/select';
      16 |
      17 | const InventorySystem: React.FC = () => {

  ERROR in src/renderer/components/InventorySystem.tsx:14:27
  TS2305: Module '"../../utils/barcodeGenerator"' has no exported member 'printBarcode'.
      12 | import { Input } from './ui/input';
      13 | import { toast } from './ui/toast';
    > 14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
         |                           ^^^^^^^^^^^^
      15 | import { Select, Option } from './ui/select';
      16 |
      17 | const InventorySystem: React.FC = () => {

  ERROR in src/renderer/components/InventorySystem.tsx:15:1
  TS6192: All imports in import declaration are unused.
      13 | import { toast } from './ui/toast';
      14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
    > 15 | import { Select, Option } from './ui/select';
         | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      16 |
      17 | const InventorySystem: React.FC = () => {
      18 |   const { t } = useTranslation();

  ERROR in src/renderer/components/InventorySystem.tsx:138:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      136 |         <Input
      137 |           type="text"
    > 138 |           value={newProduct.name}
          |           ^^^^^
      139 |           onChange={(value) => handleInputChange('name', value)}
      140 |           placeholder={t('inventory.productName')}
      141 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:145:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      143 |         <Input
      144 |           type="number"
    > 145 |           value={newProduct.price?.toString()}
          |           ^^^^^
      146 |           onChange={(value) => handleInputChange('price', parseFloat(value))}
      147 |           placeholder={t('inventory.price')}
      148 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:152:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      150 |         <Input
      151 |           type="number"
    > 152 |           value={newProduct.stock?.toString()}
          |           ^^^^^
      153 |           onChange={(value) => handleInputChange('stock', parseInt(value))}
      154 |           placeholder={t('inventory.stock')}
      155 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:159:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      157 |         <Input
      158 |           type="text"
    > 159 |           value={newProduct.category}
          |           ^^^^^
      160 |           onChange={(value) => handleInputChange('category', value)}
      161 |           placeholder={t('inventory.category')}
      162 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:166:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      164 |         <Input
      165 |           type="number"
    > 166 |           value={newProduct.lowStockThreshold?.toString()}
          |           ^^^^^
      167 |           onChange={(value) => handleInputChange('lowStockThreshold', parseInt(value))}
      168 |           placeholder={t('inventory.lowStockThreshold')}
      169 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:211:21
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      209 |                   <Button
      210 |                     onClick={() => handleDeleteProduct(product.id)}
    > 211 |                     variant="destructive"
          |                     ^^^^^^^
      212 |                     className="mr-2"
      213 |                   >
      214 |                     {t('inventory.delete')}

  ERROR in src/renderer/components/InventorySystem.tsx:231:10
  TS2741: Property 'value' is missing in type '{ type: "file"; accept: string; onChange: (value: string) => void; }' but required in type 'InputProps'.
      229 |       <div>
      230 |         <h2 className="text-xl font-bold mb-2">{t('inventory.importProducts')}</h2>
    > 231 |         <Input
          |          ^^^^^
      232 |           type="file"
      233 |           accept=".xls,.xlsx"
      234 |           onChange={(value) => {

  ERROR in src/renderer/components/LanguageSelector.tsx:3:1
  TS6133: 'Button' is declared but its value is never read.
      1 | import React from 'react';
      2 | import { useTranslation } from 'react-i18next';
    > 3 | import { Button } from './ui/button';
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      4 | import { Select, Option } from './ui/select';
      5 |
      6 | const LanguageSelector: React.FC = () => {

  ERROR in src/renderer/components/OrderSystem.tsx:44:21
  TS2345: Argument of type '(prevItems: OrderItem[]) => (OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to parameter of type 'SetStateAction<OrderItem[]>'.
    Type '(prevItems: OrderItem[]) => (OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to type '(prevState: OrderItem[]) => OrderItem[]'.
      Type '(OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to type 'OrderItem[]'.
        Type 'OrderItem | { productId: number; name: string; quantity: number; notes: string; }' is not assignable to type 'OrderItem' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
          Type '{ productId: number; name: string; quantity: number; notes: string; }' is missing the following properties from type 'OrderItem': id, unitPrice, subtotal, tax, total
      42 |     const product = products.find((p) => p.id.toString() === productId);
      43 |     if (product) {
    > 44 |       setOrderItems((prevItems) => [
         |                     ^^^^^^^^^^^^^^^^
    > 45 |         ...prevItems,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 46 |         {
         | ^^^^^^^^^^^^^^^^^^^^^
    > 47 |           productId: product.id,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 48 |           name: product.name,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 49 |           quantity: 1,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 50 |           notes: '',
         | ^^^^^^^^^^^^^^^^^^^^^
    > 51 |         },
         | ^^^^^^^^^^^^^^^^^^^^^
    > 52 |       ]);
         | ^^^^^^^^
      53 |     }
      54 |   };
      55 |

  ERROR in src/renderer/components/OrderSystem.tsx:87:9
  TS2353: Object literal may only specify known properties, and 'notes' does not exist in type 'Order'.
      85 |         items: orderItems,
      86 |         status: 'pending',
    > 87 |         notes,
         |         ^^^^^
      88 |         createdAt: new Date(),
      89 |       };
      90 |

  ERROR in src/renderer/components/OrderSystem.tsx:153:11
  TS2322: Type '{ children: Element[]; onValueChange: (productId: string) => void; placeholder: string; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      151 |         />
      152 |         <Select
    > 153 |           onValueChange={addOrderItem}
          |           ^^^^^^^^^^^^^
      154 |           placeholder={t('orders.selectProduct')}
      155 |           disabled={isLoading || products.length === 0}
      156 |         >

  ERROR in src/renderer/components/OrderSystem.tsx:158:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      156 |         >
      157 |           {products.map((product) => (
    > 158 |             <Select.Option key={product.id} value={product.id.toString()}>
          |                     ^^^^^^
      159 |               {product.name}
      160 |             </Select.Option>
      161 |           ))}

  ERROR in src/renderer/components/OrderSystem.tsx:160:22
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      158 |             <Select.Option key={product.id} value={product.id.toString()}>
      159 |               {product.name}
    > 160 |             </Select.Option>
          |                      ^^^^^^
      161 |           ))}
      162 |         </Select>
      163 |         {orderItems.map((item, index) => (

  ERROR in src/renderer/components/OrderSystem.tsx:176:15
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      174 |             />
      175 |             <Input
    > 176 |               value={item.notes}
          |               ^^^^^
      177 |               onChange={(value) => updateOrderItemNotes(index, value)}
      178 |               placeholder={t('orders.itemNotes')}
      179 |               aria-label={t('orders.itemNotes')}

  ERROR in src/renderer/components/OrderSystem.tsx:183:15
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      181 |             <Button
      182 |               onClick={() => removeOrderItem(index)}
    > 183 |               variant="destructive"
          |               ^^^^^^^
      184 |               aria-label={t('orders.remove')}
      185 |             >
      186 |               {t('orders.remove')}

  ERROR in src/renderer/components/OrderTicket.tsx:3:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
      1 | import React from 'react';
      2 | import { useTranslation } from 'react-i18next';
    > 3 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
        |                                                          ^^^^^^^^^^^
      4 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
      5 | import { SaleItem } from '../../shared/types/sale';
      6 |

  ERROR in src/renderer/components/OrderTicket.tsx:4:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
      2 | import { useTranslation } from 'react-i18next';
      3 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
    > 4 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
        |                                                                               ^^^^^^^^^^^^
      5 | import { SaleItem } from '../../shared/types/sale';
      6 |
      7 | interface OrderTicketProps {

  ERROR in src/renderer/components/OrderTicket.tsx:54:34
  TS2339: Property 'notes' does not exist on type 'SaleItem'.
      52 |                 <TableCell>{item.quantity}</TableCell>
      53 |                 <TableCell>{item.name}</TableCell>
    > 54 |                 <TableCell>{item.notes || '-'}</TableCell>
         |                                  ^^^^^
      55 |               </TableRow>
      56 |             ))}
      57 |           </TableBody>

  ERROR in src/renderer/components/ProductSearch.tsx:5:28
  TS2307: Cannot find module './ui/scroll-area' or its corresponding type declarations.
      3 | import { Input } from './ui/input';
      4 | import { Button } from './ui/button';
    > 5 | import { ScrollArea } from './ui/scroll-area';
        |                            ^^^^^^^^^^^^^^^^^^
      6 | import { Product } from '../../shared/types/product';
      7 | import debounce from 'lodash/debounce';
      8 |

  ERROR in src/renderer/components/ProductSearch.tsx:7:22
  TS7016: Could not find a declaration file for module 'lodash/debounce'. '/Users/david/Takk/Hub/projects/freedom-pos/node_modules/lodash/debounce.js' implicitly has an 'any' type.
    Try `npm i --save-dev @types/lodash` if it exists or add a new declaration (.d.ts) file containing `declare module 'lodash/debounce';`
       5 | import { ScrollArea } from './ui/scroll-area';
       6 | import { Product } from '../../shared/types/product';
    >  7 | import debounce from 'lodash/debounce';
         |                      ^^^^^^^^^^^^^^^^^
       8 |
       9 | interface ProductSearchProps {
      10 |   products: Product[];

  ERROR in src/renderer/components/ProductSearch.tsx:60:9
  TS2322: Type '(event: React.ChangeEvent<HTMLInputElement>) => void' is not assignable to type '(value: string) => void'.
    Types of parameters 'event' and 'value' are incompatible.
      Type 'string' is not assignable to type 'ChangeEvent<HTMLInputElement>'.
      58 |         placeholder={t('productSearch.placeholder')}
      59 |         value={searchTerm}
    > 60 |         onChange={handleSearch}
         |         ^^^^^^^^
      61 |         aria-label={t('productSearch.ariaLabel')}
      62 |       />
      63 |       {searchResults.length > 0 && (

  ERROR in src/renderer/components/ProductSearch.tsx:69:19
  TS2322: Type '"ghost"' is not assignable to type '"primary" | "secondary"'.
      67 |               <li key={product.id} className="list-none">
      68 |                 <Button
    > 69 |                   variant="ghost"
         |                   ^^^^^^^
      70 |                   className="w-full text-left px-3 py-2 hover:bg-accent"
      71 |                   onClick={() => handleProductSelect(product)}
      72 |                 >

  ERROR in src/renderer/components/QuoteSystem.tsx:7:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
         |                                                          ^^^^^^^^^^^
       8 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
       9 | import { Product } from '../../shared/types/product';
      10 | import { Quote, QuoteItem } from '../../shared/types/quote';

  ERROR in src/renderer/components/QuoteSystem.tsx:8:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
    >  8 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
         |                                                                               ^^^^^^^^^^^^
       9 | import { Product } from '../../shared/types/product';
      10 | import { Quote, QuoteItem } from '../../shared/types/quote';
      11 |

  ERROR in src/renderer/components/QuoteSystem.tsx:48:23
  TS2345: Argument of type '(prevItems: QuoteItem[]) => (QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to parameter of type 'SetStateAction<QuoteItem[]>'.
    Type '(prevItems: QuoteItem[]) => (QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to type '(prevState: QuoteItem[]) => QuoteItem[]'.
      Type '(QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to type 'QuoteItem[]'.
        Type 'QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; }' is not assignable to type 'QuoteItem'.
          Type '{ productId: number; name: string; price: number; quantity: number; discount: number; }' is missing the following properties from type 'QuoteItem': id, unitPrice, subtotal, tax, total
      46 |       const product = products.find((p) => p.id.toString() === productId);
      47 |       if (product) {
    > 48 |         setQuoteItems((prevItems) => [
         |                       ^^^^^^^^^^^^^^^^
    > 49 |           ...prevItems,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 50 |           {
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 51 |             productId: product.id,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 52 |             name: product.name,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 53 |             price: product.price,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 54 |             quantity: 1,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 55 |             discount: 0,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 56 |           },
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 57 |         ]);
         | ^^^^^^^^^^
      58 |       }
      59 |     },
      60 |     [products],

  ERROR in src/renderer/components/QuoteSystem.tsx:87:27
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      85 |   const calculateTotal = useCallback(() => {
      86 |     return quoteItems.reduce((total, item) => {
    > 87 |       return total + item.price * item.quantity * (1 - item.discount / 100);
         |                           ^^^^^
      88 |     }, 0);
      89 |   }, [quoteItems]);
      90 |

  ERROR in src/renderer/components/QuoteSystem.tsx:100:9
  TS2353: Object literal may only specify known properties, and 'customerName' does not exist in type 'Quote'.
       98 |
       99 |       const quote: Quote = {
    > 100 |         customerName,
          |         ^^^^^^^^^^^^
      101 |         items: quoteItems,
      102 |         total: calculateTotal(),
      103 |         expirationDate: new Date(expirationDate),

  ERROR in src/renderer/components/QuoteSystem.tsx:152:11
  TS2322: Type '{ children: Element[]; onValueChange: (productId: string) => void; placeholder: string; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      150 |         </div>
      151 |         <Select
    > 152 |           onValueChange={addQuoteItem}
          |           ^^^^^^^^^^^^^
      153 |           placeholder={t('quotes.selectProduct')}
      154 |           disabled={isLoading || products.length === 0}
      155 |         >

  ERROR in src/renderer/components/QuoteSystem.tsx:157:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      155 |         >
      156 |           {products.map((product) => (
    > 157 |             <Select.Option key={product.id} value={product.id.toString()}>
          |                     ^^^^^^
      158 |               {product.name} - ${product.price.toFixed(2)}
      159 |             </Select.Option>
      160 |           ))}

  ERROR in src/renderer/components/QuoteSystem.tsx:159:22
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      157 |             <Select.Option key={product.id} value={product.id.toString()}>
      158 |               {product.name} - ${product.price.toFixed(2)}
    > 159 |             </Select.Option>
          |                      ^^^^^^
      160 |           ))}
      161 |         </Select>
      162 |         {quoteItems.length > 0 && (

  ERROR in src/renderer/components/QuoteSystem.tsx:187:37
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      185 |                     />
      186 |                   </TableCell>
    > 187 |                   <TableCell>${item.price.toFixed(2)}</TableCell>
          |                                     ^^^^^
      188 |                   <TableCell>
      189 |                     <Input
      190 |                       type="number"

  ERROR in src/renderer/components/QuoteSystem.tsx:202:23
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      200 |                     <Button
      201 |                       onClick={() => removeQuoteItem(index)}
    > 202 |                       variant="destructive"
          |                       ^^^^^^^
      203 |                       aria-label={t('quotes.remove')}
      204 |                     >
      205 |                       {t('quotes.remove')}

  ERROR in src/renderer/components/RefundSystem.tsx:5:26
  TS2307: Cannot find module './ui/textarea' or its corresponding type declarations.
      3 | import { Button } from './ui/button';
      4 | import { Input } from './ui/input';
    > 5 | import { Textarea } from './ui/textarea';
        |                          ^^^^^^^^^^^^^^^
      6 | import { toast } from './ui/toast';
      7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
      8 | import { Label } from './ui/label';

  ERROR in src/renderer/components/RefundSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Textarea } from './ui/textarea';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 | import { Refund } from '../../shared/types/refund';
      10 |

  ERROR in src/renderer/components/RefundSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 | import { Refund } from '../../shared/types/refund';
      10 |
      11 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/RefundSystem.tsx:29:9
  TS2353: Object literal may only specify known properties, and 'saleId' does not exist in type 'Refund'.
      27 |       setIsLoading(true);
      28 |       const refund: Refund = {
    > 29 |         saleId: parseInt(saleId, 10),
         |         ^^^^^^
      30 |         amount: parseFloat(amount),
      31 |         reason,
      32 |         createdAt: new Date(),

  ERROR in src/renderer/components/RefundSystem.tsx:92:24
  TS7006: Parameter 'e' implicitly has an 'any' type.
      90 |             id="reason"
      91 |             value={reason}
    > 92 |             onChange={(e) => setReason(e.target.value)}
         |                        ^
      93 |             placeholder={t('refunds.reasonPlaceholder')}
      94 |             required
      95 |           />

  ERROR in src/renderer/components/ReportSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Input } from './ui/input';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 |
      10 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/ReportSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 |
      10 | const { ipcRenderer } = window.require('electron');
      11 |

  ERROR in src/renderer/components/ReportSystem.tsx:98:13
  TS2322: Type '{ children: Element[]; id: string; value: ReportType; onValueChange: (value: ReportType) => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
       96 |             id="reportType"
       97 |             value={reportType}
    >  98 |             onValueChange={(value: ReportType) => setReportType(value)}
          |             ^^^^^^^^^^^^^
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:100:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       98 |             onValueChange={(value: ReportType) => setReportType(value)}
       99 |           >
    > 100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
          |                     ^^^^^^
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:100:71
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       98 |             onValueChange={(value: ReportType) => setReportType(value)}
       99 |           >
    > 100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
          |                                                                       ^^^^^^
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:101:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
    > 101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
          |                     ^^^^^^
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>

  ERROR in src/renderer/components/ReportSystem.tsx:101:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
    > 101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
          |                                                                         ^^^^^^
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>

  ERROR in src/renderer/components/ReportSystem.tsx:102:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
    > 102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
          |                     ^^^^^^
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>
      105 |         </div>

  ERROR in src/renderer/components/ReportSystem.tsx:102:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
    > 102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
          |                                                                           ^^^^^^
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>
      105 |         </div>

  ERROR in src/renderer/components/ReportSystem.tsx:103:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
    > 103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
          |                     ^^^^^^
      104 |           </Select>
      105 |         </div>
      106 |

  ERROR in src/renderer/components/ReportSystem.tsx:103:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
    > 103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
          |                                                                         ^^^^^^
      104 |           </Select>
      105 |         </div>
      106 |

  ERROR in src/renderer/components/SalesSystem.tsx:9:1
  TS6133: 'Input' is declared but its value is never read.
       7 | import { getSettings } from '../../database/settingsService';
       8 | import { Button } from './ui/button';
    >  9 | import { Input } from './ui/input';
         | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      10 | import { Select } from './ui/select';
      11 | import { toast } from './ui/toast';
      12 | import { printReceipt } from '../../utils/printer';

  ERROR in src/renderer/components/SalesSystem.tsx:13:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
      11 | import { toast } from './ui/toast';
      12 | import { printReceipt } from '../../utils/printer';
    > 13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
         |                                                          ^^^^^^^^^^^
      14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
      15 | import { ScrollArea } from './ui/scroll-area';
      16 |

  ERROR in src/renderer/components/SalesSystem.tsx:14:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
      12 | import { printReceipt } from '../../utils/printer';
      13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
    > 14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
         |                                                                               ^^^^^^^^^^^^
      15 | import { ScrollArea } from './ui/scroll-area';
      16 |
      17 | interface Settings {

  ERROR in src/renderer/components/SalesSystem.tsx:15:28
  TS2307: Cannot find module './ui/scroll-area' or its corresponding type declarations.
      13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
      14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
    > 15 | import { ScrollArea } from './ui/scroll-area';
         |                            ^^^^^^^^^^^^^^^^^^
      16 |
      17 | interface Settings {
      18 |   taxRate: number;

  ERROR in src/renderer/components/SalesSystem.tsx:77:13
  TS2345: Argument of type '(prevCart: SaleItem[]) => (SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to parameter of type 'SetStateAction<SaleItem[]>'.
    Type '(prevCart: SaleItem[]) => (SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to type '(prevState: SaleItem[]) => SaleItem[]'.
      Type '(SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to type 'SaleItem[]'.
        Type 'SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; }' is not assignable to type 'SaleItem'.
          Type '{ productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; }' is missing the following properties from type 'SaleItem': id, tax, subtotal, total
      75 |
      76 |   const addToCart = useCallback((product: Product) => {
    > 77 |     setCart((prevCart) => {
         |             ^^^^^^^^^^^^^^^
      78 |       const existingItem = prevCart.find((item) => item.productId === product.id);
      79 |       if (existingItem) {
      80 |         return prevCart.map((item) =>

  ERROR in src/renderer/components/SalesSystem.tsx:119:13
  TS2739: Type '{ total: number; subtotal: number; tax: number; paymentMethod: "cash" | "card"; items: SaleItem[]; createdAt: Date; }' is missing the following properties from type 'Sale': id, customerId, status
      117 |     try {
      118 |       setIsLoading(true);
    > 119 |       const sale: Sale = {
          |             ^^^^
      120 |         total,
      121 |         subtotal,
      122 |         tax,

  ERROR in src/renderer/components/SalesSystem.tsx:129:26
  TS2345: Argument of type 'Invoice' is not assignable to parameter of type 'string'.
      127 |       const saleId = await createSale(sale);
      128 |       const invoice = await generateInvoice(saleId);
    > 129 |       await printReceipt(invoice);
          |                          ^^^^^^^
      130 |
      131 |       // Update product stock
      132 |       for (const item of cart) {

  ERROR in src/renderer/components/SalesSystem.tsx:208:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      206 |                           <Button
      207 |                             onClick={() => updateQuantity(item.productId, item.quantity - 1)}
    > 208 |                             variant="outline"
          |                             ^^^^^^^
      209 |                             size="sm"
      210 |                             disabled={isLoading}
      211 |                           >

  ERROR in src/renderer/components/SalesSystem.tsx:217:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      215 |                           <Button
      216 |                             onClick={() => updateQuantity(item.productId, item.quantity + 1)}
    > 217 |                             variant="outline"
          |                             ^^^^^^^
      218 |                             size="sm"
      219 |                             disabled={isLoading}
      220 |                           >

  ERROR in src/renderer/components/SalesSystem.tsx:253:19
  TS2322: Type '{ children: Element[]; id: string; value: "cash" | "card"; onValueChange: (value: "cash" | "card") => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      251 |                   id="paymentMethod"
      252 |                   value={paymentMethod}
    > 253 |                   onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
          |                   ^^^^^^^^^^^^^
      254 |                   disabled={isLoading}
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>

  ERROR in src/renderer/components/SalesSystem.tsx:256:27
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      254 |                   disabled={isLoading}
      255 |                 >
    > 256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                           ^^^^^^
      257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
      258 |                 </Select>
      259 |               </div>

  ERROR in src/renderer/components/SalesSystem.tsx:256:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      254 |                   disabled={isLoading}
      255 |                 >
    > 256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                                                                         ^^^^^^
      257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
      258 |                 </Select>
      259 |               </div>

  ERROR in src/renderer/components/SalesSystem.tsx:257:27
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                           ^^^^^^
      258 |                 </Select>
      259 |               </div>
      260 |               <Button

  ERROR in src/renderer/components/SalesSystem.tsx:257:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                                                                         ^^^^^^
      258 |                 </Select>
      259 |               </div>
      260 |               <Button

  ERROR in src/renderer/components/Settings.tsx:7:26
  TS2307: Cannot find module './ui/checkbox' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Checkbox } from './ui/checkbox';
         |                          ^^^^^^^^^^^^^^^
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';

  ERROR in src/renderer/components/Settings.tsx:8:52
  TS6133: 'CardFooter' is declared but its value is never read.
       6 | import { toast } from './ui/toast';
       7 | import { Checkbox } from './ui/checkbox';
    >  8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                    ^^^^^^^^^^
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';
      11 |

  ERROR in src/renderer/components/Settings.tsx:8:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Checkbox } from './ui/checkbox';
    >  8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';
      11 |

  ERROR in src/renderer/components/Settings.tsx:9:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       7 | import { Checkbox } from './ui/checkbox';
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  9 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
      10 | import { Textarea } from './ui/textarea';
      11 |
      12 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/Settings.tsx:10:26
  TS2307: Cannot find module './ui/textarea' or its corresponding type declarations.
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
       9 | import { Label } from './ui/label';
    > 10 | import { Textarea } from './ui/textarea';
         |                          ^^^^^^^^^^^^^^^
      11 |
      12 | const { ipcRenderer } = window.require('electron');
      13 |

  ERROR in src/renderer/components/Settings.tsx:120:15
  TS2322: Type '{ children: Element[]; id: string; value: "thermal" | "inkjet" | "dot_matrix"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      118 |               id="printer_type"
      119 |               value={settings.printer_type}
    > 120 |               onValueChange={(value) =>
          |               ^^^^^^^^^^^^^
      121 |                 handleChange('printer_type', value as Settings['printer_type'])
      122 |               }
      123 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:120:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      118 |               id="printer_type"
      119 |               value={settings.printer_type}
    > 120 |               onValueChange={(value) =>
          |                               ^^^^^
      121 |                 handleChange('printer_type', value as Settings['printer_type'])
      122 |               }
      123 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:125:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      123 |               disabled={isLoading}
      124 |             >
    > 125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
          |                       ^^^^^^
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:125:78
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      123 |               disabled={isLoading}
      124 |             >
    > 125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
          |                                                                              ^^^^^^
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:126:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      124 |             >
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
    > 126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
          |                       ^^^^^^
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>
      129 |           </div>

  ERROR in src/renderer/components/Settings.tsx:126:83
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      124 |             >
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
    > 126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
          |                                                                                   ^^^^^^
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>
      129 |           </div>

  ERROR in src/renderer/components/Settings.tsx:127:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
    > 127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
          |                       ^^^^^^
      128 |             </Select>
      129 |           </div>
      130 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:127:76
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
    > 127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
          |                                                                            ^^^^^^
      128 |             </Select>
      129 |           </div>
      130 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:135:63
  TS2339: Property 'target' does not exist on type 'string'.
      133 |               id="printer_name"
      134 |               value={settings.printer_name}
    > 135 |               onChange={(e) => handleChange('printer_name', e.target.value)}
          |                                                               ^^^^^^
      136 |               placeholder={t('settings.printerNamePlaceholder')}
      137 |               disabled={isLoading}
      138 |             />

  ERROR in src/renderer/components/Settings.tsx:155:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      153 |               id="use_cash_drawer"
      154 |               checked={settings.use_cash_drawer}
    > 155 |               onCheckedChange={(checked) => handleChange('use_cash_drawer', checked)}
          |                                 ^^^^^^^
      156 |               disabled={isLoading}
      157 |             />
      158 |             <Label htmlFor="use_cash_drawer">{t('settings.useCashDrawer')}</Label>

  ERROR in src/renderer/components/Settings.tsx:166:69
  TS2339: Property 'target' does not exist on type 'string'.
      164 |                 id="cash_drawer_port"
      165 |                 value={settings.cash_drawer_port}
    > 166 |                 onChange={(e) => handleChange('cash_drawer_port', e.target.value)}
          |                                                                     ^^^^^^
      167 |                 placeholder={t('settings.cashDrawerPortPlaceholder')}
      168 |                 disabled={isLoading}
      169 |               />

  ERROR in src/renderer/components/Settings.tsx:185:66
  TS2339: Property 'target' does not exist on type 'string'.
      183 |               id="currency_symbol"
      184 |               value={settings.currency_symbol}
    > 185 |               onChange={(e) => handleChange('currency_symbol', e.target.value)}
          |                                                                  ^^^^^^
      186 |               placeholder={t('settings.currencySymbolPlaceholder')}
      187 |               disabled={isLoading}
      188 |             />

  ERROR in src/renderer/components/Settings.tsx:195:15
  TS2322: Type 'number' is not assignable to type 'string'.
      193 |               id="tax_rate"
      194 |               type="number"
    > 195 |               value={settings.tax_rate}
          |               ^^^^^
      196 |               onChange={(e) => handleChange('tax_rate', parseFloat(e.target.value))}
      197 |               placeholder={t('settings.taxRatePlaceholder')}
      198 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:196:70
  TS2339: Property 'target' does not exist on type 'string'.
      194 |               type="number"
      195 |               value={settings.tax_rate}
    > 196 |               onChange={(e) => handleChange('tax_rate', parseFloat(e.target.value))}
          |                                                                      ^^^^^^
      197 |               placeholder={t('settings.taxRatePlaceholder')}
      198 |               disabled={isLoading}
      199 |             />

  ERROR in src/renderer/components/Settings.tsx:205:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      203 |               id="tax_included"
      204 |               checked={settings.tax_included}
    > 205 |               onCheckedChange={(checked) => handleChange('tax_included', checked)}
          |                                 ^^^^^^^
      206 |               disabled={isLoading}
      207 |             />
      208 |             <Label htmlFor="tax_included">{t('settings.taxIncluded')}</Label>

  ERROR in src/renderer/components/Settings.tsx:223:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      221 |               id="receipt_header"
      222 |               value={settings.receipt_header}
    > 223 |               onChange={(e) => handleChange('receipt_header', e.target.value)}
          |                          ^
      224 |               placeholder={t('settings.receiptHeaderPlaceholder')}
      225 |               disabled={isLoading}
      226 |             />

  ERROR in src/renderer/components/Settings.tsx:233:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      231 |               id="receipt_footer"
      232 |               value={settings.receipt_footer}
    > 233 |               onChange={(e) => handleChange('receipt_footer', e.target.value)}
          |                          ^
      234 |               placeholder={t('settings.receiptFooterPlaceholder')}
      235 |               disabled={isLoading}
      236 |             />

  ERROR in src/renderer/components/Settings.tsx:251:66
  TS2339: Property 'target' does not exist on type 'string'.
      249 |               id="backup_location"
      250 |               value={settings.backup_location}
    > 251 |               onChange={(e) => handleChange('backup_location', e.target.value)}
          |                                                                  ^^^^^^
      252 |               placeholder={t('settings.backupLocationPlaceholder')}
      253 |               disabled={isLoading}
      254 |             />

  ERROR in src/renderer/components/Settings.tsx:260:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      258 |               id="auto_backup"
      259 |               checked={settings.auto_backup}
    > 260 |               onCheckedChange={(checked) => handleChange('auto_backup', checked)}
          |                                 ^^^^^^^
      261 |               disabled={isLoading}
      262 |             />
      263 |             <Label htmlFor="auto_backup">{t('settings.autoBackup')}</Label>

  ERROR in src/renderer/components/Settings.tsx:271:17
  TS2322: Type '{ children: Element[]; id: string; value: "monthly" | "daily" | "weekly"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      269 |                 id="backup_frequency"
      270 |                 value={settings.backup_frequency}
    > 271 |                 onValueChange={(value) =>
          |                 ^^^^^^^^^^^^^
      272 |                   handleChange('backup_frequency', value as Settings['backup_frequency'])
      273 |                 }
      274 |                 disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:271:33
  TS7006: Parameter 'value' implicitly has an 'any' type.
      269 |                 id="backup_frequency"
      270 |                 value={settings.backup_frequency}
    > 271 |                 onValueChange={(value) =>
          |                                 ^^^^^
      272 |                   handleChange('backup_frequency', value as Settings['backup_frequency'])
      273 |                 }
      274 |                 disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:276:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      274 |                 disabled={isLoading}
      275 |               >
    > 276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
          |                         ^^^^^^
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>

  ERROR in src/renderer/components/Settings.tsx:276:76
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      274 |                 disabled={isLoading}
      275 |               >
    > 276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
          |                                                                            ^^^^^^
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>

  ERROR in src/renderer/components/Settings.tsx:277:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      275 |               >
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
    > 277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
          |                         ^^^^^^
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>
      280 |             </div>

  ERROR in src/renderer/components/Settings.tsx:277:78
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      275 |               >
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
    > 277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
          |                                                                              ^^^^^^
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>
      280 |             </div>

  ERROR in src/renderer/components/Settings.tsx:278:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
    > 278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
          |                         ^^^^^^
      279 |               </Select>
      280 |             </div>
      281 |           )}

  ERROR in src/renderer/components/Settings.tsx:278:80
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
    > 278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
          |                                                                                ^^^^^^
      279 |               </Select>
      280 |             </div>
      281 |           )}

  ERROR in src/renderer/components/Settings.tsx:295:15
  TS2322: Type '{ children: Element[]; id: string; value: string; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      293 |               id="language"
      294 |               value={settings.language}
    > 295 |               onValueChange={(value) => handleChange('language', value)}
          |               ^^^^^^^^^^^^^
      296 |               disabled={isLoading}
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:295:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      293 |               id="language"
      294 |               value={settings.language}
    > 295 |               onValueChange={(value) => handleChange('language', value)}
          |                               ^^^^^
      296 |               disabled={isLoading}
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:298:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      296 |               disabled={isLoading}
      297 |             >
    > 298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
          |                       ^^^^^^
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:298:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      296 |               disabled={isLoading}
      297 |             >
    > 298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
          |                                                                         ^^^^^^
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:299:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
    > 299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
          |                       ^^^^^^
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>
      302 |           </div>

  ERROR in src/renderer/components/Settings.tsx:299:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
    > 299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
          |                                                                         ^^^^^^
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>
      302 |           </div>

  ERROR in src/renderer/components/Settings.tsx:300:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
    > 300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
          |                       ^^^^^^
      301 |             </Select>
      302 |           </div>
      303 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:300:72
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
    > 300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
          |                                                                        ^^^^^^
      301 |             </Select>
      302 |           </div>
      303 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:308:15
  TS2322: Type '{ children: Element[]; id: string; value: "light" | "dark"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      306 |               id="theme"
      307 |               value={settings.theme}
    > 308 |               onValueChange={(value) => handleChange('theme', value as Settings['theme'])}
          |               ^^^^^^^^^^^^^
      309 |               disabled={isLoading}
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:308:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      306 |               id="theme"
      307 |               value={settings.theme}
    > 308 |               onValueChange={(value) => handleChange('theme', value as Settings['theme'])}
          |                               ^^^^^
      309 |               disabled={isLoading}
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:311:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      309 |               disabled={isLoading}
      310 |             >
    > 311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
          |                       ^^^^^^
      312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
      313 |             </Select>
      314 |           </div>

  ERROR in src/renderer/components/Settings.tsx:311:74
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      309 |               disabled={isLoading}
      310 |             >
    > 311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
          |                                                                          ^^^^^^
      312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
      313 |             </Select>
      314 |           </div>

  ERROR in src/renderer/components/Settings.tsx:312:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
    > 312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
          |                       ^^^^^^
      313 |             </Select>
      314 |           </div>
      315 |         </CardContent>

  ERROR in src/renderer/components/Settings.tsx:312:72
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
    > 312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
          |                                                                        ^^^^^^
      313 |             </Select>
      314 |           </div>
      315 |         </CardContent>

  ERROR in src/renderer/components/Settings.tsx:328:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      326 |               id="guaranteeText"
      327 |               value={settings.guaranteeText}
    > 328 |               onChange={(e) => handleChange('guaranteeText', e.target.value)}
          |                          ^
      329 |               placeholder={t('settings.guaranteeTextPlaceholder')}
      330 |               disabled={isLoading}
      331 |             />

  ERROR in src/renderer/components/Settings.tsx:338:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      336 |               id="invoiceCustomMessage"
      337 |               value={settings.invoiceCustomMessage}
    > 338 |               onChange={(e) => handleChange('invoiceCustomMessage', e.target.value)}
          |                          ^
      339 |               placeholder={t('settings.invoiceCustomMessagePlaceholder')}
      340 |               disabled={isLoading}
      341 |             />

  ERROR in src/renderer/components/SubscriptionSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 | import { Subscription } from '../../shared/types/subscription';
      10 | import { Customer } from '../../shared/types/customer';

  ERROR in src/renderer/components/SubscriptionSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 | import { Subscription } from '../../shared/types/subscription';
      10 | import { Customer } from '../../shared/types/customer';
      11 |

  ERROR in src/renderer/components/SubscriptionSystem.tsx:54:9
  TS2322: Type 'string' is not assignable to type 'PlanType'.
      52 |       const subscription: Subscription = {
      53 |         customerId: parseInt(selectedCustomerId, 10),
    > 54 |         planType,
         |         ^^^^^^^^
      55 |         startDate: new Date(startDate),
      56 |         endDate: new Date(endDate),
      57 |         status: 'active',

  ERROR in src/renderer/components/SubscriptionSystem.tsx:98:13
  TS2322: Type '{ children: (Element | Element[])[]; id: string; value: string; onValueChange: Dispatch<SetStateAction<string>>; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
       96 |             id="customer"
       97 |             value={selectedCustomerId}
    >  98 |             onValueChange={setSelectedCustomerId}
          |             ^^^^^^^^^^^^^
       99 |             disabled={isLoading}
      100 |           >
      101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:101:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |             disabled={isLoading}
      100 |           >
    > 101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
          |                     ^^^^^^
      102 |             {customers.map((customer) => (
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:101:81
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |             disabled={isLoading}
      100 |           >
    > 101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
          |                                                                                 ^^^^^^
      102 |             {customers.map((customer) => (
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:103:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
      102 |             {customers.map((customer) => (
    > 103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
          |                       ^^^^^^
      104 |                 {customer.name}
      105 |               </Select.Option>
      106 |             ))}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:105:24
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}
    > 105 |               </Select.Option>
          |                        ^^^^^^
      106 |             ))}
      107 |           </Select>
      108 |         </div>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:114:44
  TS2339: Property 'target' does not exist on type 'string'.
      112 |             id="planType"
      113 |             value={planType}
    > 114 |             onChange={(e) => setPlanType(e.target.value)}
          |                                            ^^^^^^
      115 |             placeholder={t('subscriptions.planTypePlaceholder')}
      116 |             disabled={isLoading}
      117 |           />

  ERROR in src/renderer/components/SubscriptionSystem.tsx:125:45
  TS2339: Property 'target' does not exist on type 'string'.
      123 |             type="date"
      124 |             value={startDate}
    > 125 |             onChange={(e) => setStartDate(e.target.value)}
          |                                             ^^^^^^
      126 |             disabled={isLoading}
      127 |           />
      128 |         </div>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:135:43
  TS2339: Property 'target' does not exist on type 'string'.
      133 |             type="date"
      134 |             value={endDate}
    > 135 |             onChange={(e) => setEndDate(e.target.value)}
          |                                           ^^^^^^
      136 |             disabled={isLoading}
      137 |           />
      138 |         </div>

  ERROR in src/renderer/components/ui/select.tsx:32:8
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      30 | }) => <option {...props}>{children}</option>;
      31 |
    > 32 | Select.Option = Option;
         |        ^^^^^^
      33 |

  ERROR in src/renderer/pages/Dashboard.tsx:4:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      2 | import { useTranslation } from 'react-i18next';
      3 | import { Link } from 'react-router-dom';
    > 4 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
        |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      5 | import { Button } from '../components/ui/button';
      6 | import { Skeleton } from '../components/ui/skeleton';
      7 | import { toast } from '../components/ui/toast';

  ERROR in src/renderer/pages/Dashboard.tsx:6:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      4 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
      5 | import { Button } from '../components/ui/button';
    > 6 | import { Skeleton } from '../components/ui/skeleton';
        |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      7 | import { toast } from '../components/ui/toast';
      8 | import { DollarSign, Package, BarChart2, ShoppingCart, Box, FileText } from 'lucide-react';
      9 |

  ERROR in src/renderer/pages/Dashboard.tsx:8:77
  TS2307: Cannot find module 'lucide-react' or its corresponding type declarations.
       6 | import { Skeleton } from '../components/ui/skeleton';
       7 | import { toast } from '../components/ui/toast';
    >  8 | import { DollarSign, Package, BarChart2, ShoppingCart, Box, FileText } from 'lucide-react';
         |                                                                             ^^^^^^^^^^^^^^
       9 |
      10 | interface DashboardSummary {
      11 |   totalSales: number;

  ERROR in src/renderer/pages/Dashboard.tsx:151:21
  TS2322: Type '{ children: Element; asChild: true; className: string; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
    Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonProps'.
      149 |           </CardHeader>
      150 |           <CardContent className="space-y-2">
    > 151 |             <Button asChild className="w-full">
          |                     ^^^^^^^
      152 |               <Link to="/sales">
      153 |                 <ShoppingCart className="mr-2 h-4 w-4" />
      154 |                 {t('dashboard.newSale')}

  ERROR in src/renderer/pages/Dashboard.tsx:157:21
  TS2322: Type '{ children: Element; asChild: true; variant: "secondary"; className: string; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
    Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonProps'.
      155 |               </Link>
      156 |             </Button>
    > 157 |             <Button asChild variant="secondary" className="w-full">
          |                     ^^^^^^^
      158 |               <Link to="/inventory">
      159 |                 <Box className="mr-2 h-4 w-4" />
      160 |                 {t('dashboard.manageInventory')}

  ERROR in src/renderer/pages/Dashboard.tsx:163:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      161 |               </Link>
      162 |             </Button>
    > 163 |             <Button asChild variant="outline" className="w-full">
          |                             ^^^^^^^
      164 |               <Link to="/reports">
      165 |                 <FileText className="mr-2 h-4 w-4" />
      166 |                 {t('dashboard.viewReports')}

  ERROR in src/renderer/pages/Inventory.tsx:12:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      10 | import { Button } from '../components/ui/button';
      11 | import { Input } from '../components/ui/input';
    > 12 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      13 | import {
      14 |   Table,
      15 |   TableBody,

  ERROR in src/renderer/pages/Inventory.tsx:20:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      18 |   TableHeader,
      19 |   TableRow,
    > 20 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      21 | import { toast } from '../components/ui/toast';
      22 | import {
      23 |   Dialog,

  ERROR in src/renderer/pages/Inventory.tsx:24:3
  TS6133: 'DialogTrigger' is declared but its value is never read.
      22 | import {
      23 |   Dialog,
    > 24 |   DialogTrigger,
         |   ^^^^^^^^^^^^^
      25 |   DialogContent,
      26 |   DialogHeader,
      27 |   DialogTitle,

  ERROR in src/renderer/pages/Inventory.tsx:30:8
  TS2307: Cannot find module '../components/ui/dialog' or its corresponding type declarations.
      28 |   DialogDescription,
      29 |   DialogFooter,
    > 30 | } from '../components/ui/dialog';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^^
      31 | import { Label } from '../components/ui/label';
      32 | import { Skeleton } from '../components/ui/skeleton';
      33 |

  ERROR in src/renderer/pages/Inventory.tsx:31:23
  TS2307: Cannot find module '../components/ui/label' or its corresponding type declarations.
      29 |   DialogFooter,
      30 | } from '../components/ui/dialog';
    > 31 | import { Label } from '../components/ui/label';
         |                       ^^^^^^^^^^^^^^^^^^^^^^^^
      32 | import { Skeleton } from '../components/ui/skeleton';
      33 |
      34 | const Inventory: React.FC = () => {

  ERROR in src/renderer/pages/Inventory.tsx:32:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      30 | } from '../components/ui/dialog';
      31 | import { Label } from '../components/ui/label';
    > 32 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      33 |
      34 | const Inventory: React.FC = () => {
      35 |   const { t } = useTranslation();

  ERROR in src/renderer/pages/Inventory.tsx:127:17
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      125 |                 id="name"
      126 |                 name="name"
    > 127 |                 value={newProduct.name}
          |                 ^^^^^
      128 |                 onChange={(e) => handleInputChange('name', e.target.value)}
      129 |                 placeholder={t('inventory.productNamePlaceholder')}
      130 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:128:62
  TS2339: Property 'target' does not exist on type 'string'.
      126 |                 name="name"
      127 |                 value={newProduct.name}
    > 128 |                 onChange={(e) => handleInputChange('name', e.target.value)}
          |                                                              ^^^^^^
      129 |                 placeholder={t('inventory.productNamePlaceholder')}
      130 |                 required
      131 |               />

  ERROR in src/renderer/pages/Inventory.tsx:139:17
  TS2322: Type 'number | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      137 |                 name="price"
      138 |                 type="number"
    > 139 |                 value={newProduct.price}
          |                 ^^^^^
      140 |                 onChange={(e) => handleInputChange('price', parseFloat(e.target.value))}
      141 |                 placeholder={t('inventory.pricePlaceholder')}
      142 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:140:74
  TS2339: Property 'target' does not exist on type 'string'.
      138 |                 type="number"
      139 |                 value={newProduct.price}
    > 140 |                 onChange={(e) => handleInputChange('price', parseFloat(e.target.value))}
          |                                                                          ^^^^^^
      141 |                 placeholder={t('inventory.pricePlaceholder')}
      142 |                 required
      143 |               />

  ERROR in src/renderer/pages/Inventory.tsx:151:17
  TS2322: Type 'number | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      149 |                 name="stock"
      150 |                 type="number"
    > 151 |                 value={newProduct.stock}
          |                 ^^^^^
      152 |                 onChange={(e) => handleInputChange('stock', parseInt(e.target.value))}
      153 |                 placeholder={t('inventory.stockPlaceholder')}
      154 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:152:72
  TS2339: Property 'target' does not exist on type 'string'.
      150 |                 type="number"
      151 |                 value={newProduct.stock}
    > 152 |                 onChange={(e) => handleInputChange('stock', parseInt(e.target.value))}
          |                                                                        ^^^^^^
      153 |                 placeholder={t('inventory.stockPlaceholder')}
      154 |                 required
      155 |               />

  ERROR in src/renderer/pages/Inventory.tsx:162:17
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      160 |                 id="barcode"
      161 |                 name="barcode"
    > 162 |                 value={newProduct.barcode}
          |                 ^^^^^
      163 |                 onChange={(e) => handleInputChange('barcode', e.target.value)}
      164 |                 placeholder={t('inventory.barcodePlaceholder')}
      165 |               />

  ERROR in src/renderer/pages/Inventory.tsx:163:65
  TS2339: Property 'target' does not exist on type 'string'.
      161 |                 name="barcode"
      162 |                 value={newProduct.barcode}
    > 163 |                 onChange={(e) => handleInputChange('barcode', e.target.value)}
          |                                                                 ^^^^^^
      164 |                 placeholder={t('inventory.barcodePlaceholder')}
      165 |               />
      166 |             </div>

  ERROR in src/renderer/pages/Inventory.tsx:209:79
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      207 |                         {t('inventory.edit')}
      208 |                       </Button>
    > 209 |                       <Button onClick={() => handleDeleteProduct(product.id)} variant="destructive">
          |                                                                               ^^^^^^^
      210 |                         {t('inventory.delete')}
      211 |                       </Button>
      212 |                     </TableCell>

  ERROR in src/renderer/pages/Inventory.tsx:240:83
  TS2339: Property 'target' does not exist on type 'string'.
      238 |                   id="edit-name"
      239 |                   value={editingProduct.name}
    > 240 |                   onChange={(e) => setEditingProduct({ ...editingProduct, name: e.target.value })}
          |                                                                                   ^^^^^^
      241 |                   required
      242 |                 />
      243 |               </div>

  ERROR in src/renderer/pages/Inventory.tsx:249:19
  TS2322: Type 'number' is not assignable to type 'string'.
      247 |                   id="edit-price"
      248 |                   type="number"
    > 249 |                   value={editingProduct.price}
          |                   ^^^^^
      250 |                   onChange={(e) =>
      251 |                     setEditingProduct({ ...editingProduct, price: parseFloat(e.target.value) })
      252 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:251:80
  TS2339: Property 'target' does not exist on type 'string'.
      249 |                   value={editingProduct.price}
      250 |                   onChange={(e) =>
    > 251 |                     setEditingProduct({ ...editingProduct, price: parseFloat(e.target.value) })
          |                                                                                ^^^^^^
      252 |                   }
      253 |                   required
      254 |                 />

  ERROR in src/renderer/pages/Inventory.tsx:261:19
  TS2322: Type 'number' is not assignable to type 'string'.
      259 |                   id="edit-stock"
      260 |                   type="number"
    > 261 |                   value={editingProduct.stock}
          |                   ^^^^^
      262 |                   onChange={(e) =>
      263 |                     setEditingProduct({ ...editingProduct, stock: parseInt(e.target.value) })
      264 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:263:78
  TS2339: Property 'target' does not exist on type 'string'.
      261 |                   value={editingProduct.stock}
      262 |                   onChange={(e) =>
    > 263 |                     setEditingProduct({ ...editingProduct, stock: parseInt(e.target.value) })
          |                                                                              ^^^^^^
      264 |                   }
      265 |                   required
      266 |                 />

  ERROR in src/renderer/pages/Inventory.tsx:272:19
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      270 |                 <Input
      271 |                   id="edit-barcode"
    > 272 |                   value={editingProduct.barcode}
          |                   ^^^^^
      273 |                   onChange={(e) =>
      274 |                     setEditingProduct({ ...editingProduct, barcode: e.target.value })
      275 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:274:71
  TS2339: Property 'target' does not exist on type 'string'.
      272 |                   value={editingProduct.barcode}
      273 |                   onChange={(e) =>
    > 274 |                     setEditingProduct({ ...editingProduct, barcode: e.target.value })
          |                                                                       ^^^^^^
      275 |                   }
      276 |                 />
      277 |               </div>

  ERROR in src/renderer/pages/Reports.tsx:9:31
  TS2305: Module '"../../database/productService"' has no exported member 'getTopSellingProducts'.
       7 |   getYearlySales,
       8 | } from '../../database/salesService';
    >  9 | import { getLowStockProducts, getTopSellingProducts } from '../../database/productService';
         |                               ^^^^^^^^^^^^^^^^^^^^^
      10 | import { Product } from '../../shared/types/product';
      11 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
      12 | import {

  ERROR in src/renderer/pages/Reports.tsx:11:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
       9 | import { getLowStockProducts, getTopSellingProducts } from '../../database/productService';
      10 | import { Product } from '../../shared/types/product';
    > 11 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      12 | import {
      13 |   Table,
      14 |   TableBody,

  ERROR in src/renderer/pages/Reports.tsx:19:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      17 |   TableHeader,
      18 |   TableRow,
    > 19 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      20 | import { Skeleton } from '../components/ui/skeleton';
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';

  ERROR in src/renderer/pages/Reports.tsx:20:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      18 |   TableRow,
      19 | } from '../components/ui/table';
    > 20 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';
      23 | import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

  ERROR in src/renderer/pages/Reports.tsx:23:90
  TS2307: Cannot find module 'recharts' or its corresponding type declarations.
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';
    > 23 | import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
         |                                                                                          ^^^^^^^^^^
      24 |
      25 | interface SalesData {
      26 |   count: number;

  ERROR in src/renderer/pages/Reports.tsx:76:9
  TS6133: 'formatCurrency' is declared but its value is never read.
      74 |   }, [fetchReportData]);
      75 |
    > 76 |   const formatCurrency = (amount: number) => {
         |         ^^^^^^^^^^^^^^
      77 |     return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
      78 |   };
      79 |

  ERROR in src/renderer/pages/Reports.tsx:175:11
  TS2322: Type '{ children: Element[]; value: "sales" | "inventory"; onValueChange: (value: "sales" | "inventory") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      173 |         <Select
      174 |           value={selectedReport}
    > 175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
          |           ^^^^^^^^^^^^^
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>

  ERROR in src/renderer/pages/Reports.tsx:177:19
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
      176 |         >
    > 177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
          |                   ^^^^^^
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
      179 |         </Select>
      180 |       </div>

  ERROR in src/renderer/pages/Reports.tsx:177:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
      176 |         >
    > 177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
          |                                                                           ^^^^^^
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
      179 |         </Select>
      180 |       </div>

  ERROR in src/renderer/pages/Reports.tsx:178:19
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
    > 178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
          |                   ^^^^^^
      179 |         </Select>
      180 |       </div>
      181 |

  ERROR in src/renderer/pages/Reports.tsx:178:83
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
    > 178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
          |                                                                                   ^^^^^^
      179 |         </Select>
      180 |       </div>
      181 |

  ERROR in src/renderer/pages/Sales.tsx:13:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      11 | import { Button } from '../components/ui/button';
      12 | import { Select } from '../components/ui/select';
    > 13 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      14 | import {
      15 |   Table,
      16 |   TableBody,

  ERROR in src/renderer/pages/Sales.tsx:21:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      19 |   TableHeader,
      20 |   TableRow,
    > 21 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      22 | import { Input } from '../components/ui/input';
      23 | import { Skeleton } from '../components/ui/skeleton';
      24 |

  ERROR in src/renderer/pages/Sales.tsx:23:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      21 | } from '../components/ui/table';
      22 | import { Input } from '../components/ui/input';
    > 23 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      24 |
      25 | const Sales: React.FC = () => {
      26 |   const { t } = useTranslation();

  ERROR in src/renderer/pages/Sales.tsx:49:19
  TS2345: Argument of type 'Settings' is not assignable to parameter of type 'SetStateAction<Settings | null>'.
    Type 'Settings' is missing the following properties from type 'Settings': id, createdAt, timeZone, dateFormat, and 3 more.
      47 |     try {
      48 |       const fetchedSettings = await getSettings();
    > 49 |       setSettings(fetchedSettings);
         |                   ^^^^^^^^^^^^^^^
      50 |     } catch (error) {
      51 |       console.error('Error fetching settings:', error);
      52 |       toast.error(t('sales.fetchSettingsError'));

  ERROR in src/renderer/pages/Sales.tsx:71:65
  TS2339: Property 'taxAmount' does not exist on type 'SaleItem'.
      69 |   const calculateTotals = useCallback(() => {
      70 |     const calculatedSubtotal = cart.reduce((sum, item) => sum + item.subtotal, 0);
    > 71 |     const calculatedTax = cart.reduce((sum, item) => sum + item.taxAmount, 0);
         |                                                                 ^^^^^^^^^
      72 |     setSubtotal(calculatedSubtotal);
      73 |     setTax(calculatedTax);
      74 |     setTotal(calculatedSubtotal + calculatedTax);

  ERROR in src/renderer/pages/Sales.tsx:139:13
  TS2353: Object literal may only specify known properties, and 'createdAt' does not exist in type 'SaleItem'.
      137 |             ...totals,
      138 |             tax: totals.taxAmount,
    > 139 |             createdAt: new Date(),
          |             ^^^^^^^^^
      140 |             updatedAt: new Date(),
      141 |           };
      142 |

  ERROR in src/renderer/pages/Sales.tsx:198:13
  TS2739: Type '{ total: number; subtotal: number; tax: number; paymentMethod: "cash" | "card"; items: SaleItem[]; createdAt: Date; }' is missing the following properties from type 'Sale': id, customerId, status
      196 |   const completeSale = useCallback(async () => {
      197 |     try {
    > 198 |       const sale: Sale = {
          |             ^^^^
      199 |         total,
      200 |         subtotal,
      201 |         tax,

  ERROR in src/renderer/pages/Sales.tsx:207:13
  TS6133: 'invoice' is declared but its value is never read.
      205 |       };
      206 |       const saleId = await createSale(sale);
    > 207 |       const invoice = await generateInvoice(saleId);
          |             ^^^^^^^
      208 |       console.log('Sale completed with ID:', saleId);
      209 |       toast.success(t('sales.saleCompleted'));
      210 |       // TODO: Implement invoice printing

  ERROR in src/renderer/pages/Sales.tsx:283:31
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      281 |                           <div className="flex items-center space-x-2">
      282 |                             <Button
    > 283 |                               variant="outline"
          |                               ^^^^^^^
      284 |                               size="sm"
      285 |                               onClick={() => updateQuantity(item.productId, item.quantity - 1)}
      286 |                             >

  ERROR in src/renderer/pages/Sales.tsx:291:31
  TS2322: Type 'number' is not assignable to type 'string'.
      289 |                             <Input
      290 |                               type="number"
    > 291 |                               value={item.quantity}
          |                               ^^^^^
      292 |                               onChange={(e) =>
      293 |                                 updateQuantity(item.productId, parseInt(e.target.value))
      294 |                               }

  ERROR in src/renderer/pages/Sales.tsx:293:75
  TS2339: Property 'target' does not exist on type 'string'.
      291 |                               value={item.quantity}
      292 |                               onChange={(e) =>
    > 293 |                                 updateQuantity(item.productId, parseInt(e.target.value))
          |                                                                           ^^^^^^
      294 |                               }
      295 |                               className="w-16 text-center"
      296 |                             />

  ERROR in src/renderer/pages/Sales.tsx:298:31
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      296 |                             />
      297 |                             <Button
    > 298 |                               variant="outline"
          |                               ^^^^^^^
      299 |                               size="sm"
      300 |                               onClick={() => updateQuantity(item.productId, item.quantity + 1)}
      301 |                             >

  ERROR in src/renderer/pages/Sales.tsx:316:29
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      314 |                         <TableCell>
      315 |                           <Button
    > 316 |                             variant="destructive"
          |                             ^^^^^^^
      317 |                             size="sm"
      318 |                             onClick={() => removeFromCart(item.productId)}
      319 |                           >

  ERROR in src/renderer/pages/Sales.tsx:350:21
  TS2322: Type '{ children: Element[]; id: string; value: "cash" | "card"; onValueChange: (value: "cash" | "card") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      348 |                     id="paymentMethod"
      349 |                     value={paymentMethod}
    > 350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
          |                     ^^^^^^^^^^^^^
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>

  ERROR in src/renderer/pages/Sales.tsx:352:29
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
      351 |                   >
    > 352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                             ^^^^^^
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
      354 |                   </Select>
      355 |                 </div>

  ERROR in src/renderer/pages/Sales.tsx:352:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
      351 |                   >
    > 352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                                                                           ^^^^^^
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
      354 |                   </Select>
      355 |                 </div>

  ERROR in src/renderer/pages/Sales.tsx:353:29
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                             ^^^^^^
      354 |                   </Select>
      355 |                 </div>
      356 |                 <Button onClick={completeSale} className="w-full">

  ERROR in src/renderer/pages/Sales.tsx:353:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                                                                           ^^^^^^
      354 |                   </Select>
      355 |                 </div>
      356 |                 <Button onClick={completeSale} className="w-full">

  ERROR in src/renderer/pages/Settings.tsx:9:26
  TS2307: Cannot find module '../components/ui/checkbox' or its corresponding type declarations.
       7 | import { Input } from '../components/ui/input';
       8 | import { Select } from '../components/ui/select';
    >  9 | import { Checkbox } from '../components/ui/checkbox';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
      11 | import { Label } from '../components/ui/label';
      12 | import { Skeleton } from '../components/ui/skeleton';

  ERROR in src/renderer/pages/Settings.tsx:10:70
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
       8 | import { Select } from '../components/ui/select';
       9 | import { Checkbox } from '../components/ui/checkbox';
    > 10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
         |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^
      11 | import { Label } from '../components/ui/label';
      12 | import { Skeleton } from '../components/ui/skeleton';
      13 |

  ERROR in src/renderer/pages/Settings.tsx:11:23
  TS2307: Cannot find module '../components/ui/label' or its corresponding type declarations.
       9 | import { Checkbox } from '../components/ui/checkbox';
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
    > 11 | import { Label } from '../components/ui/label';
         |                       ^^^^^^^^^^^^^^^^^^^^^^^^
      12 | import { Skeleton } from '../components/ui/skeleton';
      13 |
      14 | interface Settings {

  ERROR in src/renderer/pages/Settings.tsx:12:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
      11 | import { Label } from '../components/ui/label';
    > 12 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      13 |
      14 | interface Settings {
      15 |   businessName: string;

  ERROR in src/renderer/pages/Settings.tsx:44:19
  TS2345: Argument of type 'Settings' is not assignable to parameter of type 'SetStateAction<Settings>'.
    Property 'useBarcode' is missing in type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings' but required in type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/renderer/pages/Settings").default'.
      42 |       setIsLoading(true);
      43 |       const fetchedSettings = await getSettings();
    > 44 |       setSettings(fetchedSettings);
         |                   ^^^^^^^^^^^^^^^
      45 |     } catch (error) {
      46 |       console.error('Error fetching settings:', error);
      47 |       toast.error(t('settings.fetchError'));

  ERROR in src/renderer/pages/Settings.tsx:65:28
  TS2345: Argument of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/renderer/pages/Settings").default' is not assignable to parameter of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings'.
    Type 'Settings' is missing the following properties from type 'Settings': printerType, printerName, useCashDrawer, cashDrawerPort
      63 |     try {
      64 |       setIsSaving(true);
    > 65 |       await updateSettings(settings);
         |                            ^^^^^^^^
      66 |       toast.success(t('settings.saveSuccess'));
      67 |     } catch (error) {
      68 |       console.error('Error updating settings:', error);

  ERROR in src/renderer/pages/Settings.tsx:98:68
  TS2339: Property 'target' does not exist on type 'string'.
       96 |               id="businessName"
       97 |               value={settings.businessName}
    >  98 |               onChange={(e) => handleInputChange('businessName', e.target.value)}
          |                                                                    ^^^^^^
       99 |               required
      100 |             />
      101 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:107:71
  TS2339: Property 'target' does not exist on type 'string'.
      105 |               id="businessAddress"
      106 |               value={settings.businessAddress}
    > 107 |               onChange={(e) => handleInputChange('businessAddress', e.target.value)}
          |                                                                       ^^^^^^
      108 |               required
      109 |             />
      110 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:127:15
  TS2322: Type 'number' is not assignable to type 'string'.
      125 |               max="100"
      126 |               step="0.01"
    > 127 |               value={settings.taxRate}
          |               ^^^^^
      128 |               onChange={(e) => handleInputChange('taxRate', parseFloat(e.target.value))}
      129 |               required
      130 |             />

  ERROR in src/renderer/pages/Settings.tsx:128:74
  TS2339: Property 'target' does not exist on type 'string'.
      126 |               step="0.01"
      127 |               value={settings.taxRate}
    > 128 |               onChange={(e) => handleInputChange('taxRate', parseFloat(e.target.value))}
          |                                                                          ^^^^^^
      129 |               required
      130 |             />
      131 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:137:15
  TS2322: Type '{ children: Element[]; id: string; value: string; onValueChange: (value: any) => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      135 |               id="currency"
      136 |               value={settings.currency}
    > 137 |               onValueChange={(value) => handleInputChange('currency', value)}
          |               ^^^^^^^^^^^^^
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:137:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      135 |               id="currency"
      136 |               value={settings.currency}
    > 137 |               onValueChange={(value) => handleInputChange('currency', value)}
          |                               ^^^^^
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:139:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      137 |               onValueChange={(value) => handleInputChange('currency', value)}
      138 |             >
    > 139 |               <Select.Option value="USD">USD</Select.Option>
          |                       ^^^^^^
      140 |               <Select.Option value="EUR">EUR</Select.Option>
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}

  ERROR in src/renderer/pages/Settings.tsx:139:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      137 |               onValueChange={(value) => handleInputChange('currency', value)}
      138 |             >
    > 139 |               <Select.Option value="USD">USD</Select.Option>
          |                                                      ^^^^^^
      140 |               <Select.Option value="EUR">EUR</Select.Option>
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}

  ERROR in src/renderer/pages/Settings.tsx:140:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
    > 140 |               <Select.Option value="EUR">EUR</Select.Option>
          |                       ^^^^^^
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>

  ERROR in src/renderer/pages/Settings.tsx:140:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
    > 140 |               <Select.Option value="EUR">EUR</Select.Option>
          |                                                      ^^^^^^
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>

  ERROR in src/renderer/pages/Settings.tsx:141:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>
    > 141 |               <Select.Option value="GBP">GBP</Select.Option>
          |                       ^^^^^^
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>
      144 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:141:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>
    > 141 |               <Select.Option value="GBP">GBP</Select.Option>
          |                                                      ^^^^^^
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>
      144 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:163:15
  TS2322: Type 'number' is not assignable to type 'string'.
      161 |               type="number"
      162 |               min="0"
    > 163 |               value={settings.lowStockThreshold}
          |               ^^^^^
      164 |               onChange={(e) => handleInputChange('lowStockThreshold', parseInt(e.target.value))}
      165 |               required
      166 |             />

  ERROR in src/renderer/pages/Settings.tsx:164:82
  TS2339: Property 'target' does not exist on type 'string'.
      162 |               min="0"
      163 |               value={settings.lowStockThreshold}
    > 164 |               onChange={(e) => handleInputChange('lowStockThreshold', parseInt(e.target.value))}
          |                                                                                  ^^^^^^
      165 |               required
      166 |             />
      167 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:173:15
  TS2322: Type '{ children: Element[]; id: string; value: "light" | "dark"; onValueChange: (value: "light" | "dark") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      171 |               id="theme"
      172 |               value={settings.theme}
    > 173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
          |               ^^^^^^^^^^^^^
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:175:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
      174 |             >
    > 175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
          |                       ^^^^^^
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
      177 |             </Select>
      178 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:175:79
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
      174 |             >
    > 175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
          |                                                                               ^^^^^^
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
      177 |             </Select>
      178 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:176:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
    > 176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
          |                       ^^^^^^
      177 |             </Select>
      178 |           </div>
      179 |           <div className="flex items-center space-x-2">

  ERROR in src/renderer/pages/Settings.tsx:176:77
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
    > 176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
          |                                                                             ^^^^^^
      177 |             </Select>
      178 |           </div>
      179 |           <div className="flex items-center space-x-2">

  ERROR in src/renderer/pages/Settings.tsx:183:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      181 |               id="useBarcode"
      182 |               checked={settings.useBarcode}
    > 183 |               onCheckedChange={(checked) => handleInputChange('useBarcode', checked)}
          |                                 ^^^^^^^
      184 |             />
      185 |             <Label htmlFor="useBarcode">{t('settings.useBarcode')}</Label>
      186 |           </div>

  ERROR in src/utils/barcodeGenerator.ts:25:28
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      23 |   let sum = 0;
      24 |   for (let i = 0; i < 12; i++) {
    > 25 |     const digit = parseInt(value[i]);
         |                            ^^^^^^^^
      26 |     sum += i % 2 === 0 ? digit * 1 : digit * 3;
      27 |   }
      28 |

  ERROR in src/utils/barcodeGenerator.ts:45:28
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      43 |   let sum = 0;
      44 |   for (let i = 0; i < 11; i++) {
    > 45 |     const digit = parseInt(value[i]);
         |                            ^^^^^^^^
      46 |     sum += i % 2 === 0 ? digit * 3 : digit;
      47 |   }
      48 |

  ERROR in src/utils/barcodeGenerator.ts:107:22
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      105 |       try {
      106 |         const checkDigit = calculateEAN13CheckDigit(value.slice(0, 12));
    > 107 |         if (parseInt(value[12]) !== checkDigit) {
          |                      ^^^^^^^^^
      108 |           return {
      109 |             isValid: false,
      110 |             message: 'Invalid EAN-13 check digit',

  ERROR in src/utils/barcodeGenerator.ts:129:22
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      127 |       try {
      128 |         const checkDigit = calculateUPCCheckDigit(value.slice(0, 11));
    > 129 |         if (parseInt(value[11]) !== checkDigit) {
          |                      ^^^^^^^^^
      130 |           return {
      131 |             isValid: false,
      132 |             message: 'Invalid UPC check digit',

  ERROR in src/utils/barcodeScanner.ts:18:1
  TS2304: Cannot find name 'app'.
      16 |
      17 | // Ensure the listener is removed when the app is about to quit
    > 18 | app.on('before-quit', removeBarcodeListener);
         | ^^^
      19 |

  ERROR in src/utils/cashDrawer.ts:91:7
  TS18047: 'cashDrawer' is possibly 'null'.
      89 |       }
      90 |
    > 91 |       cashDrawer.drain((drainError) => {
         |       ^^^^^^^^^^
      92 |         if (drainError) {
      93 |           reject(new Error(`Failed to flush cash drawer buffer: ${drainError.message}`));
      94 |           return;

  ERROR in src/utils/i18n.ts:69:22
  TS4111: Property 'NODE_ENV' comes from an index signature, so it must be accessed with ['NODE_ENV'].
      67 |   defaultNS: 'translation',
      68 |   fallbackNS: 'translation',
    > 69 |   debug: process.env.NODE_ENV === 'development',
         |                      ^^^^^^^^
      70 |
      71 |   interpolation: {
      72 |     escapeValue: false,

  ERROR in src/utils/i18n.ts:173:17
  TS2379: Argument of type '[keyof TranslationKeys, object | undefined]' is not assignable to parameter of type '[key: "products" | "sales" | "customers" | "settings" | "welcome" | "inventory" | "reports" | "logout" | ("products" | "sales" | "customers" | "settings" | "welcome" | "inventory" | "reports" | "logout")[], options?: TOptionsBase & $Dictionary] | [key: string | string[], options: TOptionsBase & $Dictionary & { defaultValue: string; }] | [key: string | string[], defaultValue: string, options?: TOptionsBase & $Dictionary]' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Type '[keyof TranslationKeys, object | undefined]' is not assignable to type '[key: string | string[], defaultValue: string, options?: TOptionsBase & $Dictionary]'.
      Type at position 1 in source is not compatible with type at position 1 in target.
        Type 'object | undefined' is not assignable to type 'string'.
          Type 'undefined' is not assignable to type 'string'.
      171 |  */
      172 | export function translate(key: keyof TranslationKeys, options?: object): string {
    > 173 |   return i18n.t(key, options);
          |                 ^^^^^^^^^^^^
      174 | }
      175 |
      176 | // Export the i18n instance for use in React components

  ERROR in src/utils/i18n.ts:180:15
  TS2484: Export declaration conflicts with exported declaration of 'TranslationKeys'.
      178 |
      179 | // Type exports for use in other files
    > 180 | export type { TranslationKeys };
          |               ^^^^^^^^^^^^^^^
      181 |

  ERROR in src/utils/integrations.ts:1:57
  TS2307: Cannot find module '../integrations/types' or its corresponding type declarations.
    > 1 | import { QuickBooks, Xero, SyncResult, TokenInfo } from '../integrations/types';
        |                                                         ^^^^^^^^^^^^^^^^^^^^^^^
      2 | import { IntegrationSettings } from '../shared/types/settings';
      3 | import { getIntegrationSettings, updateIntegrationSettings } from '../database/integrationService';
      4 |

  ERROR in src/utils/integrations.ts:2:10
  TS2305: Module '"../shared/types/settings"' has no exported member 'IntegrationSettings'.
      1 | import { QuickBooks, Xero, SyncResult, TokenInfo } from '../integrations/types';
    > 2 | import { IntegrationSettings } from '../shared/types/settings';
        |          ^^^^^^^^^^^^^^^^^^^
      3 | import { getIntegrationSettings, updateIntegrationSettings } from '../database/integrationService';
      4 |
      5 | interface IntegrationInstance {

  ERROR in src/utils/integrations.ts:179:16
  TS2551: Property 'quickbooksAccessToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      177 |     const settings = await getIntegrationSettings();
      178 |     if (integrationType === 'quickbooks') {
    > 179 |       settings.quickbooksAccessToken = tokens.accessToken;
          |                ^^^^^^^^^^^^^^^^^^^^^
      180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;

  ERROR in src/utils/integrations.ts:180:16
  TS2551: Property 'quickbooksRefreshToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      178 |     if (integrationType === 'quickbooks') {
      179 |       settings.quickbooksAccessToken = tokens.accessToken;
    > 180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
          |                ^^^^^^^^^^^^^^^^^^^^^^
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;
      183 |       settings.xeroRefreshToken = tokens.refreshToken;

  ERROR in src/utils/integrations.ts:182:16
  TS2339: Property 'xeroAccessToken' does not exist on type 'IntegrationSettings'.
      180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
      181 |     } else {
    > 182 |       settings.xeroAccessToken = tokens.accessToken;
          |                ^^^^^^^^^^^^^^^
      183 |       settings.xeroRefreshToken = tokens.refreshToken;
      184 |     }
      185 |     await updateIntegrationSettings(settings);

  ERROR in src/utils/integrations.ts:183:16
  TS2339: Property 'xeroRefreshToken' does not exist on type 'IntegrationSettings'.
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;
    > 183 |       settings.xeroRefreshToken = tokens.refreshToken;
          |                ^^^^^^^^^^^^^^^^
      184 |     }
      185 |     await updateIntegrationSettings(settings);
      186 |   } catch (error) {

  ERROR in src/utils/integrations.ts:218:18
  TS2551: Property 'quickbooksAccessToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      216 |       if (integrationType === 'quickbooks') {
      217 |         settings.quickbooksEnabled = false;
    > 218 |         settings.quickbooksAccessToken = '';
          |                  ^^^^^^^^^^^^^^^^^^^^^
      219 |         settings.quickbooksRefreshToken = '';
      220 |       } else {
      221 |         settings.xeroEnabled = false;

  ERROR in src/utils/integrations.ts:219:18
  TS2551: Property 'quickbooksRefreshToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      217 |         settings.quickbooksEnabled = false;
      218 |         settings.quickbooksAccessToken = '';
    > 219 |         settings.quickbooksRefreshToken = '';
          |                  ^^^^^^^^^^^^^^^^^^^^^^
      220 |       } else {
      221 |         settings.xeroEnabled = false;
      222 |         settings.xeroAccessToken = '';

  ERROR in src/utils/integrations.ts:222:18
  TS2339: Property 'xeroAccessToken' does not exist on type 'IntegrationSettings'.
      220 |       } else {
      221 |         settings.xeroEnabled = false;
    > 222 |         settings.xeroAccessToken = '';
          |                  ^^^^^^^^^^^^^^^
      223 |         settings.xeroRefreshToken = '';
      224 |       }
      225 |       await updateIntegrationSettings(settings);

  ERROR in src/utils/integrations.ts:223:18
  TS2339: Property 'xeroRefreshToken' does not exist on type 'IntegrationSettings'.
      221 |         settings.xeroEnabled = false;
      222 |         settings.xeroAccessToken = '';
    > 223 |         settings.xeroRefreshToken = '';
          |                  ^^^^^^^^^^^^^^^^
      224 |       }
      225 |       await updateIntegrationSettings(settings);
      226 |     } catch (error) {

  ERROR in src/utils/integrations.ts:249:15
  TS2484: Export declaration conflicts with exported declaration of 'SyncOptions'.
      247 | });
      248 |
    > 249 | export type { SyncOptions, SyncResult, TokenInfo };
          |               ^^^^^^^^^^^
      250 |

  ERROR in src/utils/printer.ts:5:3
  TS2305: Module '"node-thermal-printer"' has no exported member 'BarcodeType'.
      3 |   PrinterTypes,
      4 |   CharacterSet,
    > 5 |   BarcodeType,
        |   ^^^^^^^^^^^
      6 |   PrinterOptions,
      7 | } from 'node-thermal-printer';
      8 | import { getSettings } from '../database/settingsService';

  ERROR in src/utils/printer.ts:6:3
  TS2305: Module '"node-thermal-printer"' has no exported member 'PrinterOptions'.
      4 |   CharacterSet,
      5 |   BarcodeType,
    > 6 |   PrinterOptions,
        |   ^^^^^^^^^^^^^^
      7 | } from 'node-thermal-printer';
      8 | import { getSettings } from '../database/settingsService';
      9 |

  ERROR in src/utils/printer.ts:53:30
  TS2339: Property 'characterSet' does not exist on type 'Settings'.
      51 |       type: settings.printerType === '80mm' ? PrinterTypes.EPSON : PrinterTypes.STAR,
      52 |       interface: `printer:${settings.printerName}`,
    > 53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
         |                              ^^^^^^^^^^^^
      54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
      55 |       lineCharacter: settings.lineCharacter || '=',
      56 |       width: settings.printerType === '80mm' ? 48 : 32,

  ERROR in src/utils/printer.ts:54:41
  TS2339: Property 'removeSpecialCharacters' does not exist on type 'Settings'.
      52 |       interface: `printer:${settings.printerName}`,
      53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
    > 54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
         |                                         ^^^^^^^^^^^^^^^^^^^^^^^
      55 |       lineCharacter: settings.lineCharacter || '=',
      56 |       width: settings.printerType === '80mm' ? 48 : 32,
      57 |       encoding: 'GB18030',

  ERROR in src/utils/printer.ts:55:31
  TS2339: Property 'lineCharacter' does not exist on type 'Settings'.
      53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
      54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
    > 55 |       lineCharacter: settings.lineCharacter || '=',
         |                               ^^^^^^^^^^^^^
      56 |       width: settings.printerType === '80mm' ? 48 : 32,
      57 |       encoding: 'GB18030',
      58 |       driver: process.platform === 'win32' ? 'windriver' : 'printer',

  ERROR in src/utils/printer.ts:129:7
  TS2353: Object literal may only specify known properties, and 'position' does not exist in type '{ hriPos?: number; hriFont?: number; width?: number; height?: number; }'.
      127 |       width: options.width || 2,
      128 |       height: options.height || 100,
    > 129 |       position: options.position || 'below',
          |       ^^^^^^^^
      130 |       includeText: options.includeText ?? true,
      131 |       font: options.font || 'A',
      132 |     });

  ERROR in src/utils/printer.ts:294:21
  TS2339: Property 'catch' does not exist on type 'void'.
      292 | process.on('exit', () => {
      293 |   if (printer) {
    > 294 |     printer.clear().catch(console.error);
          |                     ^^^^^
      295 |   }
      296 | });
      297 |

  ERROR in src/utils/printer.ts:298:15
  TS2484: Export declaration conflicts with exported declaration of 'PrinterSettings'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |               ^^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/printer.ts:298:32
  TS2484: Export declaration conflicts with exported declaration of 'ReceiptOptions'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |                                ^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/printer.ts:298:48
  TS2484: Export declaration conflicts with exported declaration of 'BarcodeOptions'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |                                                ^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/userManual.ts:165:15
  TS2484: Export declaration conflicts with exported declaration of 'ManualSection'.
      163 | }
      164 |
    > 165 | export type { ManualSection, ManualContent };
          |               ^^^^^^^^^^^^^
      166 |

  ERROR in src/utils/userManual.ts:165:30
  TS2484: Export declaration conflicts with exported declaration of 'ManualContent'.
      163 | }
      164 |
    > 165 | export type { ManualSection, ManualContent };
          |                              ^^^^^^^^^^^^^
      166 |

  group_0 (webpack 5.97.1) compiled with 324 errors and 4 warnings in 11399 ms

group_0:
  assets by chunk 1.23 MiB (id hint: defaultVendors)
    asset defaultVendors-node_modules_react-dom_cjs_react-dom_production_min_js/index.js 521 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_html-entities_lib_named-references_js/index.js 367 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_webpack-dev-server_client_overlay_js-node_modules_webpack-dev-ser-1a662d/index.js 127 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_react-dom_client_js-node_modules_react_index_js-node_modules_sche-5770b3/index.js 93.1 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_webpack-dev-server_client_modules_logger_index_js/index.js 81.4 KiB [emitted] (id hint: defaultVendors)
    asset defaultVendors-node_modules_ansi-html-community_index_js-node_modules_events_events_js-node_m-d5c401/index.js 70.9 KiB [emitted] (id hint: defaultVendors)
  assets by path main_window/ 54.5 KiB
    asset main_window/index.js 53.5 KiB [emitted] (name: main_window)
    asset main_window/index.html 957 bytes [emitted]
  asset index.html 957 bytes [emitted]
  Entrypoint main_window 1.28 MiB = 7 assets
  runtime modules 31.6 KiB 15 modules
  modules by path ./node_modules/ 422 KiB
    modules by path ./node_modules/webpack-dev-server/client/ 76.3 KiB 16 modules
    modules by path ./node_modules/webpack/hot/*.js 5.2 KiB 4 modules
    modules by path ./node_modules/html-entities/lib/*.js 114 KiB 4 modules
    modules by path ./node_modules/react-dom/ 193 KiB 3 modules
    modules by path ./node_modules/react/ 8.93 KiB 2 modules
    modules by path ./node_modules/scheduler/ 5.91 KiB 2 modules
    ./node_modules/ansi-html-community/index.js 4.25 KiB [built] [code generated]
    ./node_modules/events/events.js 13.9 KiB [built] [code generated]
  modules by path ./src/ 492 bytes
    ./src/renderer.ts 311 bytes [built] [code generated]
    ./src/App.tsx 181 bytes [built] [code generated]

  WARNING in DefinePlugin
  Conflicting values for 'process.env.NODE_ENV'

  WARNING in SplitChunksPlugin
  Cache group defaultVendors
  Configured minSize (19.5 KiB) is bigger than maxSize (0 bytes).
  This seem to be a invalid optimization.splitChunks configuration.

  WARNING in SplitChunksPlugin
  Fallback cache group
  Configured minSize (19.5 KiB) is bigger than maxSize (0 bytes).
  This seem to be a invalid optimization.splitChunks configuration.

  1 WARNING in child compilations (Use 'stats.children: true' resp. '--stats-children' for more details)

  1 warning has detailed information that is not shown.
  Use 'stats.errorDetails: true' resp. '--stats-error-details' to show it.

  ERROR in [eslint] prettier.resolveConfig.sync is not a function
  Occurred while linting /Users/david/Takk/Hub/projects/freedom-pos/src/renderer.ts:1
  Rule: "prettier/prettier"

  ERROR in unable to locate '/Users/david/Takk/Hub/projects/freedom-pos/src/assets' glob

  ERROR in unable to locate '/Users/david/Takk/Hub/projects/freedom-pos/src/locales' glob

  ERROR in src/database/accountService.ts:96:18
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      94 |     .sum('amount as total')
      95 |     .first();
    > 96 |   return result?.total ?? 0;
         |                  ^^^^^
      97 | }
      98 |
      99 | export async function getTotalPayables(): Promise<number> {

  ERROR in src/database/accountService.ts:105:18
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      103 |     .sum('amount as total')
      104 |     .first();
    > 105 |   return result?.total ?? 0;
          |                  ^^^^^
      106 | }
      107 |

  ERROR in src/database/appointmentService.ts:70:3
  TS2739: Type '{ id: any; customerId: any; date: any; status: AppointmentStatus; notes: any; createdAt: any; }' is missing the following properties from type 'Appointment': serviceId, duration
      68 |
      69 | function mapAppointment(result: any): Appointment {
    > 70 |   return {
         |   ^^^^^^
      71 |     id: result.id,
      72 |     customerId: result.customerId,
      73 |     date: result.date,

  ERROR in src/database/db.ts:187:30
  TS2724: 'knex' has no exported member named 'CreateTableBuilder'. Did you mean 'TableBuilder'?
      185 | async function createTableIfNotExists(
      186 |   tableName: string,
    > 187 |   tableBuilder: (table: Knex.CreateTableBuilder) => void,
          |                              ^^^^^^^^^^^^^^^^^^
      188 | ): Promise<void> {
      189 |   const exists = await knex.schema.hasTable(tableName);
      190 |   if (!exists) {

  ERROR in src/database/discountService.ts:40:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; productId: any; percentage: any; startDate: any; endDate: any; }' but required in type 'Discount'.
      38 |
      39 | function mapDiscount(result: any): Discount {
    > 40 |   return {
         |   ^^^^^^
      41 |     id: result.id,
      42 |     productId: result.productId,
      43 |     percentage: result.percentage,

  ERROR in src/database/integrationService.ts:31:5
  TS2561: Object literal may only specify known properties, but 'quickbooksAccessToken' does not exist in type 'IntegrationSettings'. Did you mean to write 'quickbooksTokens'?
      29 |   return {
      30 |     quickbooksEnabled: result.quickbooksEnabled,
    > 31 |     quickbooksAccessToken: result.quickbooksAccessToken,
         |     ^^^^^^^^^^^^^^^^^^^^^
      32 |     quickbooksRefreshToken: result.quickbooksRefreshToken,
      33 |     xeroEnabled: result.xeroEnabled,
      34 |     xeroAccessToken: result.xeroAccessToken,

  ERROR in src/database/integrationService.ts:42:5
  TS2561: Object literal may only specify known properties, but 'quickbooksAccessToken' does not exist in type 'IntegrationSettings'. Did you mean to write 'quickbooksTokens'?
      40 |   return {
      41 |     quickbooksEnabled: false,
    > 42 |     quickbooksAccessToken: '',
         |     ^^^^^^^^^^^^^^^^^^^^^
      43 |     quickbooksRefreshToken: '',
      44 |     xeroEnabled: false,
      45 |     xeroAccessToken: '',

  ERROR in src/database/inventoryService.ts:4:10
  TS2305: Module '"knex"' has no exported member 'Transaction'.
      2 | import { Product } from '../shared/types/product';
      3 | import * as XLSX from 'xlsx';
    > 4 | import { Transaction } from 'knex';
        |          ^^^^^^^^^^^
      5 |
      6 | type Dict<T> = { [key: string | number]: T };
      7 |

  ERROR in src/database/inventoryService.ts:6:6
  TS6196: 'Dict' is declared but never used.
      4 | import { Transaction } from 'knex';
      5 |
    > 6 | type Dict<T> = { [key: string | number]: T };
        |      ^^^^
      7 |
      8 | export async function importProductsFromXLS(filePath: string): Promise<void> {
      9 |   const workbook = XLSX.readFile(filePath);

  ERROR in src/database/inventoryService.ts:11:33
  TS2538: Type 'undefined' cannot be used as an index type.
       9 |   const workbook = XLSX.readFile(filePath);
      10 |   const sheetName = workbook.SheetNames[0];
    > 11 |   const sheet = workbook.Sheets[sheetName];
         |                                 ^^^^^^^^^
      12 |   const products: Product[] = XLSX.utils.sheet_to_json(sheet);
      13 |
      14 |   await knex.transaction(async (trx) => {

  ERROR in src/database/orderService.ts:87:3
  TS2739: Type '{ productId: any; name: any; quantity: any; notes: any; }' is missing the following properties from type 'OrderItem': id, unitPrice, subtotal, tax, total
      85 |
      86 | function mapOrderItem(result: any): OrderItem {
    > 87 |   return {
         |   ^^^^^^
      88 |     productId: result.productId,
      89 |     name: result.name,
      90 |     quantity: result.quantity,

  ERROR in src/database/productService.ts:135:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; productId: any; percentage: any; startDate: any; endDate: any; }' but required in type 'Discount'.
      133 |
      134 | function mapDiscount(result: any): Discount {
    > 135 |   return {
          |   ^^^^^^
      136 |     id: result.id,
      137 |     productId: result.productId,
      138 |     percentage: result.percentage,

  ERROR in src/database/productService.ts:145:3
  TS2741: Property 'createdAt' is missing in type '{ id: any; name: any; }' but required in type 'Category'.
      143 |
      144 | function mapCategory(result: any): Category {
    > 145 |   return {
          |   ^^^^^^
      146 |     id: result.id,
      147 |     name: result.name,
      148 |   };

  ERROR in src/database/quoteService.ts:98:3
  TS2741: Property 'status' is missing in type '{ id: any; customerId: any; subtotal: any; tax: any; total: any; expirationDate: any; notes: any; createdAt: any; }' but required in type 'Omit<Quote, "items">'.
       96 |
       97 | function mapQuote(result: any): Omit<Quote, 'items'> {
    >  98 |   return {
          |   ^^^^^^
       99 |     id: result.id,
      100 |     customerId: result.customerId,
      101 |     subtotal: result.subtotal,

  ERROR in src/database/quoteService.ts:111:3
  TS2739: Type '{ productId: any; name: any; quantity: any; unitPrice: any; discount: any; }' is missing the following properties from type 'QuoteItem': id, subtotal, tax, total
      109 |
      110 | function mapQuoteItem(result: any): QuoteItem {
    > 111 |   return {
          |   ^^^^^^
      112 |     productId: result.productId,
      113 |     name: result.name,
      114 |     quantity: result.quantity,

  ERROR in src/database/reportService.ts:2:1
  TS6133: 'Dict' is declared but its value is never read.
      1 | import knex from './db';
    > 2 | import { Dict } from '../shared/types/common';
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      3 |
      4 | // Interfaces remain unchanged
      5 |

  ERROR in src/database/reportService.ts:2:22
  TS2307: Cannot find module '../shared/types/common' or its corresponding type declarations.
      1 | import knex from './db';
    > 2 | import { Dict } from '../shared/types/common';
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^
      3 |
      4 | // Interfaces remain unchanged
      5 |

  ERROR in src/database/reportService.ts:6:64
  TS2304: Cannot find name 'SalesReport'.
      4 | // Interfaces remain unchanged
      5 |
    > 6 | export async function getDailySalesReport(date: Date): Promise<SalesReport> {
        |                                                                ^^^^^^^^^^^
      7 |   const startOfDay = new Date(date);
      8 |   startOfDay.setHours(0, 0, 0, 0);
      9 |   const endOfDay = new Date(date);

  ERROR in src/database/reportService.ts:35:70
  TS2304: Cannot find name 'SalesReport'.
      33 | }
      34 |
    > 35 | export async function getWeeklySalesReport(startDate: Date): Promise<SalesReport[]> {
         |                                                                      ^^^^^^^^^^^
      36 |   const endDate = new Date(startDate);
      37 |   endDate.setDate(endDate.getDate() + 6);
      38 |

  ERROR in src/database/reportService.ts:50:26
  TS7006: Parameter 'data' implicitly has an 'any' type.
      48 |
      49 |   return Promise.all(
    > 50 |     salesData.map(async (data) => ({
         |                          ^^^^
      51 |       date: new Date(data.date),
      52 |       totalSales: Number(data.totalSales) || 0,
      53 |       totalTax: Number(data.totalTax) || 0,

  ERROR in src/database/reportService.ts:64:16
  TS6133: 'calculateInventoryTurnover' is declared but its value is never read.
      62 | // Other functions remain largely unchanged, with camelCase adjustments
      63 |
    > 64 | async function calculateInventoryTurnover(date: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      65 |   const yearStart = new Date(date.getFullYear(), 0, 1);
      66 |   const costOfGoodsSold = await knex('salesItems')
      67 |     .join('products', 'salesItems.productId', 'products.id')

  ERROR in src/database/reportService.ts:73:57
  TS4111: Property 'totalCost' comes from an index signature, so it must be accessed with ['totalCost'].
      71 |
      72 |   const averageInventory = await calculateAverageInventoryValue(date);
    > 73 |   return averageInventory > 0 ? Number(costOfGoodsSold?.totalCost || 0) / averageInventory : 0;
         |                                                         ^^^^^^^^^
      74 | }
      75 |
      76 | async function calculateAverageInventoryValue(date: Date): Promise<number> {

  ERROR in src/database/reportService.ts:82:25
  TS4111: Property 'avgValue' comes from an index signature, so it must be accessed with ['avgValue'].
      80 |     .avg('totalValue as avgValue')
      81 |     .first();
    > 82 |   return Number(result?.avgValue || 0);
         |                         ^^^^^^^^
      83 | }
      84 |
      85 | async function getCustomerCount(startDate: Date, endDate: Date): Promise<number> {

  ERROR in src/database/reportService.ts:85:16
  TS6133: 'getCustomerCount' is declared but its value is never read.
      83 | }
      84 |
    > 85 | async function getCustomerCount(startDate: Date, endDate: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^
      86 |   const result = await knex('customers')
      87 |     .whereBetween('createdAt', [startDate, endDate])
      88 |     .count('* as count')

  ERROR in src/database/reportService.ts:90:25
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      88 |     .count('* as count')
      89 |     .first();
    > 90 |   return Number(result?.count || 0);
         |                         ^^^^^
      91 | }
      92 |
      93 | async function calculateCustomerRetention(startDate: Date, endDate: Date): Promise<number> {

  ERROR in src/database/reportService.ts:93:16
  TS6133: 'calculateCustomerRetention' is declared but its value is never read.
      91 | }
      92 |
    > 93 | async function calculateCustomerRetention(startDate: Date, endDate: Date): Promise<number> {
         |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      94 |   const previousPeriod = new Date(startDate.getTime() - (endDate.getTime() - startDate.getTime()));
      95 |
      96 |   const previousCustomers = await knex('sales')

  ERROR in src/database/reportService.ts:113:16
  TS6133: 'calculateAverageOrderValue' is declared but its value is never read.
      111 | }
      112 |
    > 113 | async function calculateAverageOrderValue(startDate: Date, endDate: Date): Promise<number> {
          |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
      114 |   const result = await knex('sales')
      115 |     .whereBetween('createdAt', [startDate, endDate])
      116 |     .avg('total as avgValue')

  ERROR in src/database/reportService.ts:118:25
  TS4111: Property 'avgValue' comes from an index signature, so it must be accessed with ['avgValue'].
      116 |     .avg('total as avgValue')
      117 |     .first();
    > 118 |   return Number(result?.avgValue || 0);
          |                         ^^^^^^^^
      119 | }
      120 |
      121 | async function getPeakHours(

  ERROR in src/database/reportService.ts:121:16
  TS6133: 'getPeakHours' is declared but its value is never read.
      119 | }
      120 |
    > 121 | async function getPeakHours(
          |                ^^^^^^^^^^^^
      122 |   startDate: Date,
      123 |   endDate: Date,
      124 | ): Promise<Array<{ hour: number; sales: number }>> {

  ERROR in src/database/reportService.ts:133:22
  TS4111: Property 'hour' comes from an index signature, so it must be accessed with ['hour'].
      131 |
      132 |   return results.map((row) => ({
    > 133 |     hour: Number(row.hour),
          |                      ^^^^
      134 |     sales: Number(row.sales),
      135 |   }));
      136 | }

  ERROR in src/database/reportService.ts:134:23
  TS4111: Property 'sales' comes from an index signature, so it must be accessed with ['sales'].
      132 |   return results.map((row) => ({
      133 |     hour: Number(row.hour),
    > 134 |     sales: Number(row.sales),
          |                       ^^^^^
      135 |   }));
      136 | }
      137 |

  ERROR in src/database/reportService.ts:169:22
  TS4111: Property 'hour' comes from an index signature, so it must be accessed with ['hour'].
      167 |
      168 |   return results.map((row) => ({
    > 169 |     hour: Number(row.hour),
          |                      ^^^^
      170 |     sales: Number(row.sales),
      171 |   }));
      172 | }

  ERROR in src/database/reportService.ts:170:23
  TS4111: Property 'sales' comes from an index signature, so it must be accessed with ['sales'].
      168 |   return results.map((row) => ({
      169 |     hour: Number(row.hour),
    > 170 |     sales: Number(row.sales),
          |                       ^^^^^
      171 |   }));
      172 | }
      173 |

  ERROR in src/database/reportService.ts:174:16
  TS6133: 'calculateTotalTax' is declared but its value is never read.
      172 | }
      173 |
    > 174 | async function calculateTotalTax(startDate: Date, endDate: Date): Promise<number> {
          |                ^^^^^^^^^^^^^^^^^
      175 |   const result = await knex('sales')
      176 |     .whereBetween('createdAt', [startDate, endDate])
      177 |     .sum('tax as totalTax')

  ERROR in src/database/reportService.ts:179:25
  TS4111: Property 'totalTax' comes from an index signature, so it must be accessed with ['totalTax'].
      177 |     .sum('tax as totalTax')
      178 |     .first();
    > 179 |   return Number(result?.totalTax || 0);
          |                         ^^^^^^^^
      180 | }
      181 |
      182 | async function calculateCashFlow(

  ERROR in src/database/reportService.ts:182:16
  TS6133: 'calculateCashFlow' is declared but its value is never read.
      180 | }
      181 |
    > 182 | async function calculateCashFlow(
          |                ^^^^^^^^^^^^^^^^^
      183 |   startDate: Date,
      184 |   endDate: Date,
      185 | ): Promise<{ opening: number; closing: number; netChange: number }> {

  ERROR in src/database/reportService.ts:215:16
  TS6133: 'calculateEmployeePerformance' is declared but its value is never read.
      213 | }
      214 |
    > 215 | async function calculateEmployeePerformance(
          |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      216 |   startDate: Date,
      217 |   endDate: Date,
      218 | ): Promise<EmployeePerformance[]> {

  ERROR in src/database/reportService.ts:218:12
  TS2304: Cannot find name 'EmployeePerformance'.
      216 |   startDate: Date,
      217 |   endDate: Date,
    > 218 | ): Promise<EmployeePerformance[]> {
          |            ^^^^^^^^^^^^^^^^^^^
      219 |   const results = await knex('sales')
      220 |     .join('employees', 'sales.employeeId', 'employees.id')
      221 |     .whereBetween('sales.createdAt', [startDate, endDate])

  ERROR in src/database/salesService.ts:41:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      39 |   });
      40 |
    > 41 |   return saleId;
         |   ^^^^^^
      42 | }
      43 |
      44 | export async function getSaleById(saleId: number): Promise<Sale | null> {

  ERROR in src/database/salesService.ts:54:9
  TS2741: Property 'status' is missing in type '{ id: any; total: number; subtotal: number; tax: number; paymentMethod: any; customerId: any; createdAt: Date; items: SaleItem[]; }' but required in type 'Sale'.
      52 |     .select('saleItems.*', 'products.name');
      53 |
    > 54 |   const sale: Sale = {
         |         ^^^^
      55 |     id: saleData.id,
      56 |     total: Number(saleData.total),
      57 |     subtotal: Number(saleData.subtotal),

  ERROR in src/database/salesService.ts:91:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      89 |
      90 |   return {
    > 91 |     count: Number(result?.count || 0),
         |                           ^^^^^
      92 |     total: Number(result?.total || 0),
      93 |   };
      94 | }

  ERROR in src/database/salesService.ts:92:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      90 |   return {
      91 |     count: Number(result?.count || 0),
    > 92 |     total: Number(result?.total || 0),
         |                           ^^^^^
      93 |   };
      94 | }
      95 |

  ERROR in src/database/salesService.ts:107:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      105 |
      106 |   return {
    > 107 |     count: Number(result?.count || 0),
          |                           ^^^^^
      108 |     total: Number(result?.total || 0),
      109 |   };
      110 | }

  ERROR in src/database/salesService.ts:108:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      106 |   return {
      107 |     count: Number(result?.count || 0),
    > 108 |     total: Number(result?.total || 0),
          |                           ^^^^^
      109 |   };
      110 | }
      111 |

  ERROR in src/database/salesService.ts:124:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      122 |
      123 |   return {
    > 124 |     count: Number(result?.count || 0),
          |                           ^^^^^
      125 |     total: Number(result?.total || 0),
      126 |   };
      127 | }

  ERROR in src/database/salesService.ts:125:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      123 |   return {
      124 |     count: Number(result?.count || 0),
    > 125 |     total: Number(result?.total || 0),
          |                           ^^^^^
      126 |   };
      127 | }
      128 |

  ERROR in src/database/salesService.ts:141:27
  TS4111: Property 'count' comes from an index signature, so it must be accessed with ['count'].
      139 |
      140 |   return {
    > 141 |     count: Number(result?.count || 0),
          |                           ^^^^^
      142 |     total: Number(result?.total || 0),
      143 |   };
      144 | }

  ERROR in src/database/salesService.ts:142:27
  TS4111: Property 'total' comes from an index signature, so it must be accessed with ['total'].
      140 |   return {
      141 |     count: Number(result?.count || 0),
    > 142 |     total: Number(result?.total || 0),
          |                           ^^^^^
      143 |   };
      144 | }
      145 |

  ERROR in src/database/salesService.ts:159:3
  TS2739: Type '{ saleId: number; businessName: string; businessAddress: string; customerName: string; items: SaleItem[]; subtotal: number; tax: number; total: number; paymentMethod: PaymentMethod; createdAt: Date; guaranteeText: any; customMessage: any; }' is missing the following properties from type 'Invoice': id, isPaid
      157 |   }
      158 |
    > 159 |   return {
          |   ^^^^^^
      160 |     saleId: sale.id,
      161 |     businessName: settings.businessName,
      162 |     businessAddress: settings.businessAddress,

  ERROR in src/database/salesService.ts:170:29
  TS2551: Property 'guaranteeText' does not exist on type 'Settings'. Did you mean 'guarantee'?
      168 |     paymentMethod: sale.paymentMethod,
      169 |     createdAt: sale.createdAt,
    > 170 |     guaranteeText: settings.guaranteeText || '',
          |                             ^^^^^^^^^^^^^
      171 |     customMessage: settings.invoiceCustomMessage || '',
      172 |   };
      173 | }

  ERROR in src/database/salesService.ts:171:29
  TS2551: Property 'invoiceCustomMessage' does not exist on type 'Settings'. Did you mean 'invoiceMessage'?
      169 |     createdAt: sale.createdAt,
      170 |     guaranteeText: settings.guaranteeText || '',
    > 171 |     customMessage: settings.invoiceCustomMessage || '',
          |                             ^^^^^^^^^^^^^^^^^^^^
      172 |   };
      173 | }
      174 |

  ERROR in src/database/salesService.ts:187:18
  TS4111: Property 'productId' comes from an index signature, so it must be accessed with ['productId'].
      185 |
      186 |   return topProducts.map((p) => ({
    > 187 |     productId: p.productId,
          |                  ^^^^^^^^^
      188 |     name: p.name,
      189 |     totalSold: Number(p.totalSold),
      190 |   }));

  ERROR in src/database/salesService.ts:188:13
  TS4111: Property 'name' comes from an index signature, so it must be accessed with ['name'].
      186 |   return topProducts.map((p) => ({
      187 |     productId: p.productId,
    > 188 |     name: p.name,
          |             ^^^^
      189 |     totalSold: Number(p.totalSold),
      190 |   }));
      191 | }

  ERROR in src/database/salesService.ts:189:25
  TS4111: Property 'totalSold' comes from an index signature, so it must be accessed with ['totalSold'].
      187 |     productId: p.productId,
      188 |     name: p.name,
    > 189 |     totalSold: Number(p.totalSold),
          |                         ^^^^^^^^^
      190 |   }));
      191 | }
      192 |

  ERROR in src/database/salesService.ts:205:18
  TS4111: Property 'productId' comes from an index signature, so it must be accessed with ['productId'].
      203 |
      204 |   return leastProducts.map((p) => ({
    > 205 |     productId: p.productId,
          |                  ^^^^^^^^^
      206 |     name: p.name,
      207 |     totalSold: Number(p.totalSold),
      208 |   }));

  ERROR in src/database/salesService.ts:206:13
  TS4111: Property 'name' comes from an index signature, so it must be accessed with ['name'].
      204 |   return leastProducts.map((p) => ({
      205 |     productId: p.productId,
    > 206 |     name: p.name,
          |             ^^^^
      207 |     totalSold: Number(p.totalSold),
      208 |   }));
      209 | }

  ERROR in src/database/salesService.ts:207:25
  TS4111: Property 'totalSold' comes from an index signature, so it must be accessed with ['totalSold'].
      205 |     productId: p.productId,
      206 |     name: p.name,
    > 207 |     totalSold: Number(p.totalSold),
          |                         ^^^^^^^^^
      208 |   }));
      209 | }
      210 |

  ERROR in src/database/salesService.ts:219:24
  TS2339: Property 'expiresAt' does not exist on type 'Omit<Quote, "id">'.
      217 |       total: quote.total,
      218 |       createdAt: quote.createdAt,
    > 219 |       expiresAt: quote.expiresAt,
          |                        ^^^^^^^^^
      220 |       notes: quote.notes,
      221 |     });
      222 |

  ERROR in src/database/salesService.ts:228:21
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      226 |         productId: item.productId,
      227 |         quantity: item.quantity,
    > 228 |         price: item.price,
          |                     ^^^^^
      229 |         discount: item.discount || 0,
      230 |       })),
      231 |     );

  ERROR in src/database/salesService.ts:236:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      234 |   });
      235 |
    > 236 |   return quoteId;
          |   ^^^^^^
      237 | }
      238 |
      239 | export async function getQuoteById(quoteId: number): Promise<Quote | null> {

  ERROR in src/database/salesService.ts:258:5
  TS2353: Object literal may only specify known properties, and 'expiresAt' does not exist in type 'Quote'.
      256 |     total: Number(quoteData.total),
      257 |     createdAt: new Date(quoteData.createdAt),
    > 258 |     expiresAt: new Date(quoteData.expiresAt),
          |     ^^^^^^^^^
      259 |     notes: quoteData.notes,
      260 |     items: quoteItems.map(
      261 |       (item): QuoteItem => ({

  ERROR in src/database/salesService.ts:264:9
  TS2353: Object literal may only specify known properties, and 'price' does not exist in type 'QuoteItem'.
      262 |         productId: item.productId,
      263 |         name: item.name,
    > 264 |         price: Number(item.price),
          |         ^^^^^
      265 |         quantity: Number(item.quantity),
      266 |         discount: Number(item.discount || 0),
      267 |         subtotal: Number(item.price) * Number(item.quantity),

  ERROR in src/database/salesService.ts:281:24
  TS2339: Property 'expiresAt' does not exist on type 'Quote'.
      279 |       tax: quote.tax,
      280 |       total: quote.total,
    > 281 |       expiresAt: quote.expiresAt,
          |                        ^^^^^^^^^
      282 |       notes: quote.notes,
      283 |     });
      284 |

  ERROR in src/database/salesService.ts:292:21
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      290 |         productId: item.productId,
      291 |         quantity: item.quantity,
    > 292 |         price: item.price,
          |                     ^^^^^
      293 |         discount: item.discount || 0,
      294 |       })),
      295 |     );

  ERROR in src/database/salesService.ts:309:22
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      307 |   const [refundId] = await knex.transaction(async (trx: Knex.Transaction) => {
      308 |     const [id] = await trx('refunds').insert({
    > 309 |       saleId: refund.saleId,
          |                      ^^^^^^
      310 |       amount: refund.amount,
      311 |       reason: refund.reason,
      312 |       createdAt: refund.createdAt,

  ERROR in src/database/salesService.ts:315:43
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      313 |     });
      314 |
    > 315 |     await trx('sales').where('id', refund.saleId).decrement('total', refund.amount);
          |                                           ^^^^^^
      316 |
      317 |     const sale = await getSaleById(refund.saleId);
      318 |     if (sale) {

  ERROR in src/database/salesService.ts:317:43
  TS2339: Property 'saleId' does not exist on type 'Omit<Refund, "id">'.
      315 |     await trx('sales').where('id', refund.saleId).decrement('total', refund.amount);
      316 |
    > 317 |     const sale = await getSaleById(refund.saleId);
          |                                           ^^^^^^
      318 |     if (sale) {
      319 |       for (const item of sale.items) {
      320 |         await updateProductStock(item.productId, item.quantity, trx);

  ERROR in src/database/salesService.ts:327:3
  TS2322: Type 'number | undefined' is not assignable to type 'number'.
    Type 'undefined' is not assignable to type 'number'.
      325 |   });
      326 |
    > 327 |   return refundId;
          |   ^^^^^^
      328 | }
      329 |
      330 | export async function getRefundById(refundId: number): Promise<Refund | null> {

  ERROR in src/database/salesService.ts:377:41
  TS4111: Property 'totalRefunds' comes from an index signature, so it must be accessed with ['totalRefunds'].
      375 |   const cashSales = Number(salesResult?.cashSales || 0);
      376 |   const cardSales = Number(salesResult?.cardSales || 0);
    > 377 |   const refunds = Number(refundsResult?.totalRefunds || 0);
          |                                         ^^^^^^^^^^^^
      378 |   const netTotal = totalSales - refunds;
      379 |
      380 |   return {

  ERROR in src/database/subscriptionService.ts:23:3
  TS2739: Type '{ id: any; customerId: any; planType: any; startDate: Date; endDate: Date; status: any; createdAt: Date; }' is missing the following properties from type 'Subscription': price, paymentFrequency, autoRenew
      21 |
      22 | function mapSubscription(result: any): Subscription {
    > 23 |   return {
         |   ^^^^^^
      24 |     id: result.id,
      25 |     customerId: result.customerId,
      26 |     planType: result.planType,

  ERROR in src/database/userService.ts:60:5
  TS2322: Type 'Date | null' is not assignable to type 'Date'.
    Type 'null' is not assignable to type 'Date'.
      58 |     password: result.password,
      59 |     role: result.role,
    > 60 |     lastLogin: result.lastLogin ? new Date(result.lastLogin) : null,
         |     ^^^^^^^^^
      61 |     createdAt: new Date(result.createdAt),
      62 |   };
      63 | }

  ERROR in src/index.ts:1:30
  TS6133: 'ipcMain' is declared but its value is never read.
    > 1 | import { app, BrowserWindow, ipcMain } from 'electron';
        |                              ^^^^^^^
      2 | import isDev from 'electron-is-dev';
      3 | import * as path from 'path';
      4 |

  ERROR in src/main/main.ts:11:10
  TS2305: Module '"../utils/userManual"' has no exported member 'exportUserManual'.
       9 | import { createUser, validateUser } from '../database/userService';
      10 | import { getSettings, updateSettings } from '../database/settingsService';
    > 11 | import { exportUserManual } from '../utils/userManual';
         |          ^^^^^^^^^^^^^^^^
      12 | import { setupI18n } from '../utils/i18n';
      13 | import { generateReport } from '../database/reportService';
      14 | import { createQuote, updateQuote, deleteQuote, createRefund } from '../database/salesService';

  ERROR in src/main/main.ts:13:10
  TS2305: Module '"../database/reportService"' has no exported member 'generateReport'.
      11 | import { exportUserManual } from '../utils/userManual';
      12 | import { setupI18n } from '../utils/i18n';
    > 13 | import { generateReport } from '../database/reportService';
         |          ^^^^^^^^^^^^^^
      14 | import { createQuote, updateQuote, deleteQuote, createRefund } from '../database/salesService';
      15 | import { Order, OrderStatus } from '../shared/types/order';
      16 | import { Appointment } from '../shared/types/appointment';

  ERROR in src/main/main.ts:130:26
  TS2345: Argument of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/shared/types/settings").Settings' is not assignable to parameter of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings'.
    Types of property 'theme' are incompatible.
      Type 'Theme' is not assignable to type '"light" | "dark"'.
        Type '"system"' is not assignable to type '"light" | "dark"'.
      128 | ipcMain.handle('update-settings', async (_, settings: Settings) => {
      129 |   try {
    > 130 |     await updateSettings(settings);
          |                          ^^^^^^^^
      131 |     return { success: true, message: 'Settings updated successfully' };
      132 |   } catch (error) {
      133 |     console.error('Failed to update settings:', error);

  ERROR in src/renderer/App.tsx:6:25
  TS2307: Cannot find module './pages/QuoteSystem' or its corresponding type declarations.
      4 | import Reports from './pages/Reports';
      5 | import Sales from './pages/Sales';
    > 6 | import QuoteSystem from './pages/QuoteSystem';
        |                         ^^^^^^^^^^^^^^^^^^^^^
      7 | import OrderSystem from './pages/OrderSystem';
      8 | import AppointmentSystem from './pages/AppointmentSystem';
      9 | import RefundSystem from './pages/RefundSystem';

  ERROR in src/renderer/App.tsx:7:25
  TS2307: Cannot find module './pages/OrderSystem' or its corresponding type declarations.
       5 | import Sales from './pages/Sales';
       6 | import QuoteSystem from './pages/QuoteSystem';
    >  7 | import OrderSystem from './pages/OrderSystem';
         |                         ^^^^^^^^^^^^^^^^^^^^^
       8 | import AppointmentSystem from './pages/AppointmentSystem';
       9 | import RefundSystem from './pages/RefundSystem';
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';

  ERROR in src/renderer/App.tsx:8:31
  TS2307: Cannot find module './pages/AppointmentSystem' or its corresponding type declarations.
       6 | import QuoteSystem from './pages/QuoteSystem';
       7 | import OrderSystem from './pages/OrderSystem';
    >  8 | import AppointmentSystem from './pages/AppointmentSystem';
         |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
       9 | import RefundSystem from './pages/RefundSystem';
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';
      11 | import Settings from './pages/Settings';

  ERROR in src/renderer/App.tsx:9:26
  TS2307: Cannot find module './pages/RefundSystem' or its corresponding type declarations.
       7 | import OrderSystem from './pages/OrderSystem';
       8 | import AppointmentSystem from './pages/AppointmentSystem';
    >  9 | import RefundSystem from './pages/RefundSystem';
         |                          ^^^^^^^^^^^^^^^^^^^^^^
      10 | import SubscriptionSystem from './pages/SubscriptionSystem';
      11 | import Settings from './pages/Settings';
      12 |

  ERROR in src/renderer/App.tsx:10:32
  TS2307: Cannot find module './pages/SubscriptionSystem' or its corresponding type declarations.
       8 | import AppointmentSystem from './pages/AppointmentSystem';
       9 | import RefundSystem from './pages/RefundSystem';
    > 10 | import SubscriptionSystem from './pages/SubscriptionSystem';
         |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      11 | import Settings from './pages/Settings';
      12 |
      13 | function App() {

  ERROR in src/renderer/components/InventorySystem.tsx:9:3
  TS2305: Module '"../../database/productService"' has no exported member 'importProductsFromXLS'.
       7 |   updateProduct,
       8 |   deleteProduct,
    >  9 |   importProductsFromXLS,
         |   ^^^^^^^^^^^^^^^^^^^^^
      10 | } from '../../database/productService';
      11 | import { Button } from './ui/button';
      12 | import { Input } from './ui/input';

  ERROR in src/renderer/components/InventorySystem.tsx:14:10
  TS2305: Module '"../../utils/barcodeGenerator"' has no exported member 'generateBarcode'.
      12 | import { Input } from './ui/input';
      13 | import { toast } from './ui/toast';
    > 14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
         |          ^^^^^^^^^^^^^^^
      15 | import { Select, Option } from './ui/select';
      16 |
      17 | const InventorySystem: React.FC = () => {

  ERROR in src/renderer/components/InventorySystem.tsx:14:27
  TS2305: Module '"../../utils/barcodeGenerator"' has no exported member 'printBarcode'.
      12 | import { Input } from './ui/input';
      13 | import { toast } from './ui/toast';
    > 14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
         |                           ^^^^^^^^^^^^
      15 | import { Select, Option } from './ui/select';
      16 |
      17 | const InventorySystem: React.FC = () => {

  ERROR in src/renderer/components/InventorySystem.tsx:15:1
  TS6192: All imports in import declaration are unused.
      13 | import { toast } from './ui/toast';
      14 | import { generateBarcode, printBarcode } from '../../utils/barcodeGenerator';
    > 15 | import { Select, Option } from './ui/select';
         | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      16 |
      17 | const InventorySystem: React.FC = () => {
      18 |   const { t } = useTranslation();

  ERROR in src/renderer/components/InventorySystem.tsx:138:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      136 |         <Input
      137 |           type="text"
    > 138 |           value={newProduct.name}
          |           ^^^^^
      139 |           onChange={(value) => handleInputChange('name', value)}
      140 |           placeholder={t('inventory.productName')}
      141 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:145:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      143 |         <Input
      144 |           type="number"
    > 145 |           value={newProduct.price?.toString()}
          |           ^^^^^
      146 |           onChange={(value) => handleInputChange('price', parseFloat(value))}
      147 |           placeholder={t('inventory.price')}
      148 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:152:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      150 |         <Input
      151 |           type="number"
    > 152 |           value={newProduct.stock?.toString()}
          |           ^^^^^
      153 |           onChange={(value) => handleInputChange('stock', parseInt(value))}
      154 |           placeholder={t('inventory.stock')}
      155 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:159:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      157 |         <Input
      158 |           type="text"
    > 159 |           value={newProduct.category}
          |           ^^^^^
      160 |           onChange={(value) => handleInputChange('category', value)}
      161 |           placeholder={t('inventory.category')}
      162 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:166:11
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      164 |         <Input
      165 |           type="number"
    > 166 |           value={newProduct.lowStockThreshold?.toString()}
          |           ^^^^^
      167 |           onChange={(value) => handleInputChange('lowStockThreshold', parseInt(value))}
      168 |           placeholder={t('inventory.lowStockThreshold')}
      169 |           required

  ERROR in src/renderer/components/InventorySystem.tsx:211:21
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      209 |                   <Button
      210 |                     onClick={() => handleDeleteProduct(product.id)}
    > 211 |                     variant="destructive"
          |                     ^^^^^^^
      212 |                     className="mr-2"
      213 |                   >
      214 |                     {t('inventory.delete')}

  ERROR in src/renderer/components/InventorySystem.tsx:231:10
  TS2741: Property 'value' is missing in type '{ type: "file"; accept: string; onChange: (value: string) => void; }' but required in type 'InputProps'.
      229 |       <div>
      230 |         <h2 className="text-xl font-bold mb-2">{t('inventory.importProducts')}</h2>
    > 231 |         <Input
          |          ^^^^^
      232 |           type="file"
      233 |           accept=".xls,.xlsx"
      234 |           onChange={(value) => {

  ERROR in src/renderer/components/LanguageSelector.tsx:3:1
  TS6133: 'Button' is declared but its value is never read.
      1 | import React from 'react';
      2 | import { useTranslation } from 'react-i18next';
    > 3 | import { Button } from './ui/button';
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      4 | import { Select, Option } from './ui/select';
      5 |
      6 | const LanguageSelector: React.FC = () => {

  ERROR in src/renderer/components/OrderSystem.tsx:44:21
  TS2345: Argument of type '(prevItems: OrderItem[]) => (OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to parameter of type 'SetStateAction<OrderItem[]>'.
    Type '(prevItems: OrderItem[]) => (OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to type '(prevState: OrderItem[]) => OrderItem[]'.
      Type '(OrderItem | { productId: number; name: string; quantity: number; notes: string; })[]' is not assignable to type 'OrderItem[]'.
        Type 'OrderItem | { productId: number; name: string; quantity: number; notes: string; }' is not assignable to type 'OrderItem' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
          Type '{ productId: number; name: string; quantity: number; notes: string; }' is missing the following properties from type 'OrderItem': id, unitPrice, subtotal, tax, total
      42 |     const product = products.find((p) => p.id.toString() === productId);
      43 |     if (product) {
    > 44 |       setOrderItems((prevItems) => [
         |                     ^^^^^^^^^^^^^^^^
    > 45 |         ...prevItems,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 46 |         {
         | ^^^^^^^^^^^^^^^^^^^^^
    > 47 |           productId: product.id,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 48 |           name: product.name,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 49 |           quantity: 1,
         | ^^^^^^^^^^^^^^^^^^^^^
    > 50 |           notes: '',
         | ^^^^^^^^^^^^^^^^^^^^^
    > 51 |         },
         | ^^^^^^^^^^^^^^^^^^^^^
    > 52 |       ]);
         | ^^^^^^^^
      53 |     }
      54 |   };
      55 |

  ERROR in src/renderer/components/OrderSystem.tsx:87:9
  TS2353: Object literal may only specify known properties, and 'notes' does not exist in type 'Order'.
      85 |         items: orderItems,
      86 |         status: 'pending',
    > 87 |         notes,
         |         ^^^^^
      88 |         createdAt: new Date(),
      89 |       };
      90 |

  ERROR in src/renderer/components/OrderSystem.tsx:153:11
  TS2322: Type '{ children: Element[]; onValueChange: (productId: string) => void; placeholder: string; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      151 |         />
      152 |         <Select
    > 153 |           onValueChange={addOrderItem}
          |           ^^^^^^^^^^^^^
      154 |           placeholder={t('orders.selectProduct')}
      155 |           disabled={isLoading || products.length === 0}
      156 |         >

  ERROR in src/renderer/components/OrderSystem.tsx:158:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      156 |         >
      157 |           {products.map((product) => (
    > 158 |             <Select.Option key={product.id} value={product.id.toString()}>
          |                     ^^^^^^
      159 |               {product.name}
      160 |             </Select.Option>
      161 |           ))}

  ERROR in src/renderer/components/OrderSystem.tsx:160:22
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      158 |             <Select.Option key={product.id} value={product.id.toString()}>
      159 |               {product.name}
    > 160 |             </Select.Option>
          |                      ^^^^^^
      161 |           ))}
      162 |         </Select>
      163 |         {orderItems.map((item, index) => (

  ERROR in src/renderer/components/OrderSystem.tsx:176:15
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      174 |             />
      175 |             <Input
    > 176 |               value={item.notes}
          |               ^^^^^
      177 |               onChange={(value) => updateOrderItemNotes(index, value)}
      178 |               placeholder={t('orders.itemNotes')}
      179 |               aria-label={t('orders.itemNotes')}

  ERROR in src/renderer/components/OrderSystem.tsx:183:15
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      181 |             <Button
      182 |               onClick={() => removeOrderItem(index)}
    > 183 |               variant="destructive"
          |               ^^^^^^^
      184 |               aria-label={t('orders.remove')}
      185 |             >
      186 |               {t('orders.remove')}

  ERROR in src/renderer/components/OrderTicket.tsx:3:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
      1 | import React from 'react';
      2 | import { useTranslation } from 'react-i18next';
    > 3 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
        |                                                          ^^^^^^^^^^^
      4 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
      5 | import { SaleItem } from '../../shared/types/sale';
      6 |

  ERROR in src/renderer/components/OrderTicket.tsx:4:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
      2 | import { useTranslation } from 'react-i18next';
      3 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
    > 4 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
        |                                                                               ^^^^^^^^^^^^
      5 | import { SaleItem } from '../../shared/types/sale';
      6 |
      7 | interface OrderTicketProps {

  ERROR in src/renderer/components/OrderTicket.tsx:54:34
  TS2339: Property 'notes' does not exist on type 'SaleItem'.
      52 |                 <TableCell>{item.quantity}</TableCell>
      53 |                 <TableCell>{item.name}</TableCell>
    > 54 |                 <TableCell>{item.notes || '-'}</TableCell>
         |                                  ^^^^^
      55 |               </TableRow>
      56 |             ))}
      57 |           </TableBody>

  ERROR in src/renderer/components/ProductSearch.tsx:5:28
  TS2307: Cannot find module './ui/scroll-area' or its corresponding type declarations.
      3 | import { Input } from './ui/input';
      4 | import { Button } from './ui/button';
    > 5 | import { ScrollArea } from './ui/scroll-area';
        |                            ^^^^^^^^^^^^^^^^^^
      6 | import { Product } from '../../shared/types/product';
      7 | import debounce from 'lodash/debounce';
      8 |

  ERROR in src/renderer/components/ProductSearch.tsx:7:22
  TS7016: Could not find a declaration file for module 'lodash/debounce'. '/Users/david/Takk/Hub/projects/freedom-pos/node_modules/lodash/debounce.js' implicitly has an 'any' type.
    Try `npm i --save-dev @types/lodash` if it exists or add a new declaration (.d.ts) file containing `declare module 'lodash/debounce';`
       5 | import { ScrollArea } from './ui/scroll-area';
       6 | import { Product } from '../../shared/types/product';
    >  7 | import debounce from 'lodash/debounce';
         |                      ^^^^^^^^^^^^^^^^^
       8 |
       9 | interface ProductSearchProps {
      10 |   products: Product[];

  ERROR in src/renderer/components/ProductSearch.tsx:60:9
  TS2322: Type '(event: React.ChangeEvent<HTMLInputElement>) => void' is not assignable to type '(value: string) => void'.
    Types of parameters 'event' and 'value' are incompatible.
      Type 'string' is not assignable to type 'ChangeEvent<HTMLInputElement>'.
      58 |         placeholder={t('productSearch.placeholder')}
      59 |         value={searchTerm}
    > 60 |         onChange={handleSearch}
         |         ^^^^^^^^
      61 |         aria-label={t('productSearch.ariaLabel')}
      62 |       />
      63 |       {searchResults.length > 0 && (

  ERROR in src/renderer/components/ProductSearch.tsx:69:19
  TS2322: Type '"ghost"' is not assignable to type '"primary" | "secondary"'.
      67 |               <li key={product.id} className="list-none">
      68 |                 <Button
    > 69 |                   variant="ghost"
         |                   ^^^^^^^
      70 |                   className="w-full text-left px-3 py-2 hover:bg-accent"
      71 |                   onClick={() => handleProductSelect(product)}
      72 |                 >

  ERROR in src/renderer/components/QuoteSystem.tsx:7:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
         |                                                          ^^^^^^^^^^^
       8 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
       9 | import { Product } from '../../shared/types/product';
      10 | import { Quote, QuoteItem } from '../../shared/types/quote';

  ERROR in src/renderer/components/QuoteSystem.tsx:8:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
    >  8 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
         |                                                                               ^^^^^^^^^^^^
       9 | import { Product } from '../../shared/types/product';
      10 | import { Quote, QuoteItem } from '../../shared/types/quote';
      11 |

  ERROR in src/renderer/components/QuoteSystem.tsx:48:23
  TS2345: Argument of type '(prevItems: QuoteItem[]) => (QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to parameter of type 'SetStateAction<QuoteItem[]>'.
    Type '(prevItems: QuoteItem[]) => (QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to type '(prevState: QuoteItem[]) => QuoteItem[]'.
      Type '(QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; })[]' is not assignable to type 'QuoteItem[]'.
        Type 'QuoteItem | { productId: number; name: string; price: number; quantity: number; discount: number; }' is not assignable to type 'QuoteItem'.
          Type '{ productId: number; name: string; price: number; quantity: number; discount: number; }' is missing the following properties from type 'QuoteItem': id, unitPrice, subtotal, tax, total
      46 |       const product = products.find((p) => p.id.toString() === productId);
      47 |       if (product) {
    > 48 |         setQuoteItems((prevItems) => [
         |                       ^^^^^^^^^^^^^^^^
    > 49 |           ...prevItems,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 50 |           {
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 51 |             productId: product.id,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 52 |             name: product.name,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 53 |             price: product.price,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 54 |             quantity: 1,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 55 |             discount: 0,
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 56 |           },
         | ^^^^^^^^^^^^^^^^^^^^^^^
    > 57 |         ]);
         | ^^^^^^^^^^
      58 |       }
      59 |     },
      60 |     [products],

  ERROR in src/renderer/components/QuoteSystem.tsx:87:27
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      85 |   const calculateTotal = useCallback(() => {
      86 |     return quoteItems.reduce((total, item) => {
    > 87 |       return total + item.price * item.quantity * (1 - item.discount / 100);
         |                           ^^^^^
      88 |     }, 0);
      89 |   }, [quoteItems]);
      90 |

  ERROR in src/renderer/components/QuoteSystem.tsx:100:9
  TS2353: Object literal may only specify known properties, and 'customerName' does not exist in type 'Quote'.
       98 |
       99 |       const quote: Quote = {
    > 100 |         customerName,
          |         ^^^^^^^^^^^^
      101 |         items: quoteItems,
      102 |         total: calculateTotal(),
      103 |         expirationDate: new Date(expirationDate),

  ERROR in src/renderer/components/QuoteSystem.tsx:152:11
  TS2322: Type '{ children: Element[]; onValueChange: (productId: string) => void; placeholder: string; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      150 |         </div>
      151 |         <Select
    > 152 |           onValueChange={addQuoteItem}
          |           ^^^^^^^^^^^^^
      153 |           placeholder={t('quotes.selectProduct')}
      154 |           disabled={isLoading || products.length === 0}
      155 |         >

  ERROR in src/renderer/components/QuoteSystem.tsx:157:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      155 |         >
      156 |           {products.map((product) => (
    > 157 |             <Select.Option key={product.id} value={product.id.toString()}>
          |                     ^^^^^^
      158 |               {product.name} - ${product.price.toFixed(2)}
      159 |             </Select.Option>
      160 |           ))}

  ERROR in src/renderer/components/QuoteSystem.tsx:159:22
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      157 |             <Select.Option key={product.id} value={product.id.toString()}>
      158 |               {product.name} - ${product.price.toFixed(2)}
    > 159 |             </Select.Option>
          |                      ^^^^^^
      160 |           ))}
      161 |         </Select>
      162 |         {quoteItems.length > 0 && (

  ERROR in src/renderer/components/QuoteSystem.tsx:187:37
  TS2339: Property 'price' does not exist on type 'QuoteItem'.
      185 |                     />
      186 |                   </TableCell>
    > 187 |                   <TableCell>${item.price.toFixed(2)}</TableCell>
          |                                     ^^^^^
      188 |                   <TableCell>
      189 |                     <Input
      190 |                       type="number"

  ERROR in src/renderer/components/QuoteSystem.tsx:202:23
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      200 |                     <Button
      201 |                       onClick={() => removeQuoteItem(index)}
    > 202 |                       variant="destructive"
          |                       ^^^^^^^
      203 |                       aria-label={t('quotes.remove')}
      204 |                     >
      205 |                       {t('quotes.remove')}

  ERROR in src/renderer/components/RefundSystem.tsx:5:26
  TS2307: Cannot find module './ui/textarea' or its corresponding type declarations.
      3 | import { Button } from './ui/button';
      4 | import { Input } from './ui/input';
    > 5 | import { Textarea } from './ui/textarea';
        |                          ^^^^^^^^^^^^^^^
      6 | import { toast } from './ui/toast';
      7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
      8 | import { Label } from './ui/label';

  ERROR in src/renderer/components/RefundSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Textarea } from './ui/textarea';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 | import { Refund } from '../../shared/types/refund';
      10 |

  ERROR in src/renderer/components/RefundSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 | import { Refund } from '../../shared/types/refund';
      10 |
      11 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/RefundSystem.tsx:29:9
  TS2353: Object literal may only specify known properties, and 'saleId' does not exist in type 'Refund'.
      27 |       setIsLoading(true);
      28 |       const refund: Refund = {
    > 29 |         saleId: parseInt(saleId, 10),
         |         ^^^^^^
      30 |         amount: parseFloat(amount),
      31 |         reason,
      32 |         createdAt: new Date(),

  ERROR in src/renderer/components/RefundSystem.tsx:92:24
  TS7006: Parameter 'e' implicitly has an 'any' type.
      90 |             id="reason"
      91 |             value={reason}
    > 92 |             onChange={(e) => setReason(e.target.value)}
         |                        ^
      93 |             placeholder={t('refunds.reasonPlaceholder')}
      94 |             required
      95 |           />

  ERROR in src/renderer/components/ReportSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Input } from './ui/input';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 |
      10 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/ReportSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 |
      10 | const { ipcRenderer } = window.require('electron');
      11 |

  ERROR in src/renderer/components/ReportSystem.tsx:98:13
  TS2322: Type '{ children: Element[]; id: string; value: ReportType; onValueChange: (value: ReportType) => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
       96 |             id="reportType"
       97 |             value={reportType}
    >  98 |             onValueChange={(value: ReportType) => setReportType(value)}
          |             ^^^^^^^^^^^^^
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:100:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       98 |             onValueChange={(value: ReportType) => setReportType(value)}
       99 |           >
    > 100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
          |                     ^^^^^^
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:100:71
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       98 |             onValueChange={(value: ReportType) => setReportType(value)}
       99 |           >
    > 100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
          |                                                                       ^^^^^^
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>

  ERROR in src/renderer/components/ReportSystem.tsx:101:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
    > 101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
          |                     ^^^^^^
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>

  ERROR in src/renderer/components/ReportSystem.tsx:101:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |           >
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
    > 101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
          |                                                                         ^^^^^^
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>

  ERROR in src/renderer/components/ReportSystem.tsx:102:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
    > 102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
          |                     ^^^^^^
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>
      105 |         </div>

  ERROR in src/renderer/components/ReportSystem.tsx:102:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      100 |             <Select.Option value="daily">{t('reports.daily')}</Select.Option>
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
    > 102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
          |                                                                           ^^^^^^
      103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
      104 |           </Select>
      105 |         </div>

  ERROR in src/renderer/components/ReportSystem.tsx:103:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
    > 103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
          |                     ^^^^^^
      104 |           </Select>
      105 |         </div>
      106 |

  ERROR in src/renderer/components/ReportSystem.tsx:103:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="weekly">{t('reports.weekly')}</Select.Option>
      102 |             <Select.Option value="monthly">{t('reports.monthly')}</Select.Option>
    > 103 |             <Select.Option value="annual">{t('reports.annual')}</Select.Option>
          |                                                                         ^^^^^^
      104 |           </Select>
      105 |         </div>
      106 |

  ERROR in src/renderer/components/SalesSystem.tsx:9:1
  TS6133: 'Input' is declared but its value is never read.
       7 | import { getSettings } from '../../database/settingsService';
       8 | import { Button } from './ui/button';
    >  9 | import { Input } from './ui/input';
         | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      10 | import { Select } from './ui/select';
      11 | import { toast } from './ui/toast';
      12 | import { printReceipt } from '../../utils/printer';

  ERROR in src/renderer/components/SalesSystem.tsx:13:58
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
      11 | import { toast } from './ui/toast';
      12 | import { printReceipt } from '../../utils/printer';
    > 13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
         |                                                          ^^^^^^^^^^^
      14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
      15 | import { ScrollArea } from './ui/scroll-area';
      16 |

  ERROR in src/renderer/components/SalesSystem.tsx:14:79
  TS2307: Cannot find module './ui/table' or its corresponding type declarations.
      12 | import { printReceipt } from '../../utils/printer';
      13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
    > 14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
         |                                                                               ^^^^^^^^^^^^
      15 | import { ScrollArea } from './ui/scroll-area';
      16 |
      17 | interface Settings {

  ERROR in src/renderer/components/SalesSystem.tsx:15:28
  TS2307: Cannot find module './ui/scroll-area' or its corresponding type declarations.
      13 | import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
      14 | import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
    > 15 | import { ScrollArea } from './ui/scroll-area';
         |                            ^^^^^^^^^^^^^^^^^^
      16 |
      17 | interface Settings {
      18 |   taxRate: number;

  ERROR in src/renderer/components/SalesSystem.tsx:77:13
  TS2345: Argument of type '(prevCart: SaleItem[]) => (SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to parameter of type 'SetStateAction<SaleItem[]>'.
    Type '(prevCart: SaleItem[]) => (SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to type '(prevState: SaleItem[]) => SaleItem[]'.
      Type '(SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; })[]' is not assignable to type 'SaleItem[]'.
        Type 'SaleItem | { productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; }' is not assignable to type 'SaleItem'.
          Type '{ productId: number; name: string; price: number; quantity: number; discount: number; taxAmount: number; }' is missing the following properties from type 'SaleItem': id, tax, subtotal, total
      75 |
      76 |   const addToCart = useCallback((product: Product) => {
    > 77 |     setCart((prevCart) => {
         |             ^^^^^^^^^^^^^^^
      78 |       const existingItem = prevCart.find((item) => item.productId === product.id);
      79 |       if (existingItem) {
      80 |         return prevCart.map((item) =>

  ERROR in src/renderer/components/SalesSystem.tsx:119:13
  TS2739: Type '{ total: number; subtotal: number; tax: number; paymentMethod: "cash" | "card"; items: SaleItem[]; createdAt: Date; }' is missing the following properties from type 'Sale': id, customerId, status
      117 |     try {
      118 |       setIsLoading(true);
    > 119 |       const sale: Sale = {
          |             ^^^^
      120 |         total,
      121 |         subtotal,
      122 |         tax,

  ERROR in src/renderer/components/SalesSystem.tsx:129:26
  TS2345: Argument of type 'Invoice' is not assignable to parameter of type 'string'.
      127 |       const saleId = await createSale(sale);
      128 |       const invoice = await generateInvoice(saleId);
    > 129 |       await printReceipt(invoice);
          |                          ^^^^^^^
      130 |
      131 |       // Update product stock
      132 |       for (const item of cart) {

  ERROR in src/renderer/components/SalesSystem.tsx:208:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      206 |                           <Button
      207 |                             onClick={() => updateQuantity(item.productId, item.quantity - 1)}
    > 208 |                             variant="outline"
          |                             ^^^^^^^
      209 |                             size="sm"
      210 |                             disabled={isLoading}
      211 |                           >

  ERROR in src/renderer/components/SalesSystem.tsx:217:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      215 |                           <Button
      216 |                             onClick={() => updateQuantity(item.productId, item.quantity + 1)}
    > 217 |                             variant="outline"
          |                             ^^^^^^^
      218 |                             size="sm"
      219 |                             disabled={isLoading}
      220 |                           >

  ERROR in src/renderer/components/SalesSystem.tsx:253:19
  TS2322: Type '{ children: Element[]; id: string; value: "cash" | "card"; onValueChange: (value: "cash" | "card") => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      251 |                   id="paymentMethod"
      252 |                   value={paymentMethod}
    > 253 |                   onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
          |                   ^^^^^^^^^^^^^
      254 |                   disabled={isLoading}
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>

  ERROR in src/renderer/components/SalesSystem.tsx:256:27
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      254 |                   disabled={isLoading}
      255 |                 >
    > 256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                           ^^^^^^
      257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
      258 |                 </Select>
      259 |               </div>

  ERROR in src/renderer/components/SalesSystem.tsx:256:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      254 |                   disabled={isLoading}
      255 |                 >
    > 256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                                                                         ^^^^^^
      257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
      258 |                 </Select>
      259 |               </div>

  ERROR in src/renderer/components/SalesSystem.tsx:257:27
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                           ^^^^^^
      258 |                 </Select>
      259 |               </div>
      260 |               <Button

  ERROR in src/renderer/components/SalesSystem.tsx:257:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      255 |                 >
      256 |                   <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 257 |                   <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                                                                         ^^^^^^
      258 |                 </Select>
      259 |               </div>
      260 |               <Button

  ERROR in src/renderer/components/Settings.tsx:7:26
  TS2307: Cannot find module './ui/checkbox' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Checkbox } from './ui/checkbox';
         |                          ^^^^^^^^^^^^^^^
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';

  ERROR in src/renderer/components/Settings.tsx:8:52
  TS6133: 'CardFooter' is declared but its value is never read.
       6 | import { toast } from './ui/toast';
       7 | import { Checkbox } from './ui/checkbox';
    >  8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                    ^^^^^^^^^^
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';
      11 |

  ERROR in src/renderer/components/Settings.tsx:8:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Checkbox } from './ui/checkbox';
    >  8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       9 | import { Label } from './ui/label';
      10 | import { Textarea } from './ui/textarea';
      11 |

  ERROR in src/renderer/components/Settings.tsx:9:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       7 | import { Checkbox } from './ui/checkbox';
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  9 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
      10 | import { Textarea } from './ui/textarea';
      11 |
      12 | const { ipcRenderer } = window.require('electron');

  ERROR in src/renderer/components/Settings.tsx:10:26
  TS2307: Cannot find module './ui/textarea' or its corresponding type declarations.
       8 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
       9 | import { Label } from './ui/label';
    > 10 | import { Textarea } from './ui/textarea';
         |                          ^^^^^^^^^^^^^^^
      11 |
      12 | const { ipcRenderer } = window.require('electron');
      13 |

  ERROR in src/renderer/components/Settings.tsx:120:15
  TS2322: Type '{ children: Element[]; id: string; value: "thermal" | "inkjet" | "dot_matrix"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      118 |               id="printer_type"
      119 |               value={settings.printer_type}
    > 120 |               onValueChange={(value) =>
          |               ^^^^^^^^^^^^^
      121 |                 handleChange('printer_type', value as Settings['printer_type'])
      122 |               }
      123 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:120:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      118 |               id="printer_type"
      119 |               value={settings.printer_type}
    > 120 |               onValueChange={(value) =>
          |                               ^^^^^
      121 |                 handleChange('printer_type', value as Settings['printer_type'])
      122 |               }
      123 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:125:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      123 |               disabled={isLoading}
      124 |             >
    > 125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
          |                       ^^^^^^
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:125:78
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      123 |               disabled={isLoading}
      124 |             >
    > 125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
          |                                                                              ^^^^^^
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:126:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      124 |             >
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
    > 126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
          |                       ^^^^^^
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>
      129 |           </div>

  ERROR in src/renderer/components/Settings.tsx:126:83
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      124 |             >
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
    > 126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
          |                                                                                   ^^^^^^
      127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
      128 |             </Select>
      129 |           </div>

  ERROR in src/renderer/components/Settings.tsx:127:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
    > 127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
          |                       ^^^^^^
      128 |             </Select>
      129 |           </div>
      130 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:127:76
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      125 |               <Select.Option value="thermal">{t('settings.thermal')}</Select.Option>
      126 |               <Select.Option value="dot_matrix">{t('settings.dotMatrix')}</Select.Option>
    > 127 |               <Select.Option value="inkjet">{t('settings.inkjet')}</Select.Option>
          |                                                                            ^^^^^^
      128 |             </Select>
      129 |           </div>
      130 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:135:63
  TS2339: Property 'target' does not exist on type 'string'.
      133 |               id="printer_name"
      134 |               value={settings.printer_name}
    > 135 |               onChange={(e) => handleChange('printer_name', e.target.value)}
          |                                                               ^^^^^^
      136 |               placeholder={t('settings.printerNamePlaceholder')}
      137 |               disabled={isLoading}
      138 |             />

  ERROR in src/renderer/components/Settings.tsx:155:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      153 |               id="use_cash_drawer"
      154 |               checked={settings.use_cash_drawer}
    > 155 |               onCheckedChange={(checked) => handleChange('use_cash_drawer', checked)}
          |                                 ^^^^^^^
      156 |               disabled={isLoading}
      157 |             />
      158 |             <Label htmlFor="use_cash_drawer">{t('settings.useCashDrawer')}</Label>

  ERROR in src/renderer/components/Settings.tsx:166:69
  TS2339: Property 'target' does not exist on type 'string'.
      164 |                 id="cash_drawer_port"
      165 |                 value={settings.cash_drawer_port}
    > 166 |                 onChange={(e) => handleChange('cash_drawer_port', e.target.value)}
          |                                                                     ^^^^^^
      167 |                 placeholder={t('settings.cashDrawerPortPlaceholder')}
      168 |                 disabled={isLoading}
      169 |               />

  ERROR in src/renderer/components/Settings.tsx:185:66
  TS2339: Property 'target' does not exist on type 'string'.
      183 |               id="currency_symbol"
      184 |               value={settings.currency_symbol}
    > 185 |               onChange={(e) => handleChange('currency_symbol', e.target.value)}
          |                                                                  ^^^^^^
      186 |               placeholder={t('settings.currencySymbolPlaceholder')}
      187 |               disabled={isLoading}
      188 |             />

  ERROR in src/renderer/components/Settings.tsx:195:15
  TS2322: Type 'number' is not assignable to type 'string'.
      193 |               id="tax_rate"
      194 |               type="number"
    > 195 |               value={settings.tax_rate}
          |               ^^^^^
      196 |               onChange={(e) => handleChange('tax_rate', parseFloat(e.target.value))}
      197 |               placeholder={t('settings.taxRatePlaceholder')}
      198 |               disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:196:70
  TS2339: Property 'target' does not exist on type 'string'.
      194 |               type="number"
      195 |               value={settings.tax_rate}
    > 196 |               onChange={(e) => handleChange('tax_rate', parseFloat(e.target.value))}
          |                                                                      ^^^^^^
      197 |               placeholder={t('settings.taxRatePlaceholder')}
      198 |               disabled={isLoading}
      199 |             />

  ERROR in src/renderer/components/Settings.tsx:205:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      203 |               id="tax_included"
      204 |               checked={settings.tax_included}
    > 205 |               onCheckedChange={(checked) => handleChange('tax_included', checked)}
          |                                 ^^^^^^^
      206 |               disabled={isLoading}
      207 |             />
      208 |             <Label htmlFor="tax_included">{t('settings.taxIncluded')}</Label>

  ERROR in src/renderer/components/Settings.tsx:223:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      221 |               id="receipt_header"
      222 |               value={settings.receipt_header}
    > 223 |               onChange={(e) => handleChange('receipt_header', e.target.value)}
          |                          ^
      224 |               placeholder={t('settings.receiptHeaderPlaceholder')}
      225 |               disabled={isLoading}
      226 |             />

  ERROR in src/renderer/components/Settings.tsx:233:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      231 |               id="receipt_footer"
      232 |               value={settings.receipt_footer}
    > 233 |               onChange={(e) => handleChange('receipt_footer', e.target.value)}
          |                          ^
      234 |               placeholder={t('settings.receiptFooterPlaceholder')}
      235 |               disabled={isLoading}
      236 |             />

  ERROR in src/renderer/components/Settings.tsx:251:66
  TS2339: Property 'target' does not exist on type 'string'.
      249 |               id="backup_location"
      250 |               value={settings.backup_location}
    > 251 |               onChange={(e) => handleChange('backup_location', e.target.value)}
          |                                                                  ^^^^^^
      252 |               placeholder={t('settings.backupLocationPlaceholder')}
      253 |               disabled={isLoading}
      254 |             />

  ERROR in src/renderer/components/Settings.tsx:260:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      258 |               id="auto_backup"
      259 |               checked={settings.auto_backup}
    > 260 |               onCheckedChange={(checked) => handleChange('auto_backup', checked)}
          |                                 ^^^^^^^
      261 |               disabled={isLoading}
      262 |             />
      263 |             <Label htmlFor="auto_backup">{t('settings.autoBackup')}</Label>

  ERROR in src/renderer/components/Settings.tsx:271:17
  TS2322: Type '{ children: Element[]; id: string; value: "monthly" | "daily" | "weekly"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      269 |                 id="backup_frequency"
      270 |                 value={settings.backup_frequency}
    > 271 |                 onValueChange={(value) =>
          |                 ^^^^^^^^^^^^^
      272 |                   handleChange('backup_frequency', value as Settings['backup_frequency'])
      273 |                 }
      274 |                 disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:271:33
  TS7006: Parameter 'value' implicitly has an 'any' type.
      269 |                 id="backup_frequency"
      270 |                 value={settings.backup_frequency}
    > 271 |                 onValueChange={(value) =>
          |                                 ^^^^^
      272 |                   handleChange('backup_frequency', value as Settings['backup_frequency'])
      273 |                 }
      274 |                 disabled={isLoading}

  ERROR in src/renderer/components/Settings.tsx:276:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      274 |                 disabled={isLoading}
      275 |               >
    > 276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
          |                         ^^^^^^
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>

  ERROR in src/renderer/components/Settings.tsx:276:76
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      274 |                 disabled={isLoading}
      275 |               >
    > 276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
          |                                                                            ^^^^^^
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>

  ERROR in src/renderer/components/Settings.tsx:277:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      275 |               >
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
    > 277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
          |                         ^^^^^^
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>
      280 |             </div>

  ERROR in src/renderer/components/Settings.tsx:277:78
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      275 |               >
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
    > 277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
          |                                                                              ^^^^^^
      278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
      279 |               </Select>
      280 |             </div>

  ERROR in src/renderer/components/Settings.tsx:278:25
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
    > 278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
          |                         ^^^^^^
      279 |               </Select>
      280 |             </div>
      281 |           )}

  ERROR in src/renderer/components/Settings.tsx:278:80
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      276 |                 <Select.Option value="daily">{t('settings.daily')}</Select.Option>
      277 |                 <Select.Option value="weekly">{t('settings.weekly')}</Select.Option>
    > 278 |                 <Select.Option value="monthly">{t('settings.monthly')}</Select.Option>
          |                                                                                ^^^^^^
      279 |               </Select>
      280 |             </div>
      281 |           )}

  ERROR in src/renderer/components/Settings.tsx:295:15
  TS2322: Type '{ children: Element[]; id: string; value: string; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      293 |               id="language"
      294 |               value={settings.language}
    > 295 |               onValueChange={(value) => handleChange('language', value)}
          |               ^^^^^^^^^^^^^
      296 |               disabled={isLoading}
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:295:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      293 |               id="language"
      294 |               value={settings.language}
    > 295 |               onValueChange={(value) => handleChange('language', value)}
          |                               ^^^^^
      296 |               disabled={isLoading}
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:298:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      296 |               disabled={isLoading}
      297 |             >
    > 298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
          |                       ^^^^^^
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:298:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      296 |               disabled={isLoading}
      297 |             >
    > 298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
          |                                                                         ^^^^^^
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>

  ERROR in src/renderer/components/Settings.tsx:299:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
    > 299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
          |                       ^^^^^^
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>
      302 |           </div>

  ERROR in src/renderer/components/Settings.tsx:299:73
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      297 |             >
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
    > 299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
          |                                                                         ^^^^^^
      300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
      301 |             </Select>
      302 |           </div>

  ERROR in src/renderer/components/Settings.tsx:300:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
    > 300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
          |                       ^^^^^^
      301 |             </Select>
      302 |           </div>
      303 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:300:72
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      298 |               <Select.Option value="en">{t('settings.english')}</Select.Option>
      299 |               <Select.Option value="es">{t('settings.spanish')}</Select.Option>
    > 300 |               <Select.Option value="fr">{t('settings.french')}</Select.Option>
          |                                                                        ^^^^^^
      301 |             </Select>
      302 |           </div>
      303 |           <div className="space-y-2">

  ERROR in src/renderer/components/Settings.tsx:308:15
  TS2322: Type '{ children: Element[]; id: string; value: "light" | "dark"; onValueChange: (value: any) => void; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      306 |               id="theme"
      307 |               value={settings.theme}
    > 308 |               onValueChange={(value) => handleChange('theme', value as Settings['theme'])}
          |               ^^^^^^^^^^^^^
      309 |               disabled={isLoading}
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:308:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      306 |               id="theme"
      307 |               value={settings.theme}
    > 308 |               onValueChange={(value) => handleChange('theme', value as Settings['theme'])}
          |                               ^^^^^
      309 |               disabled={isLoading}
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>

  ERROR in src/renderer/components/Settings.tsx:311:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      309 |               disabled={isLoading}
      310 |             >
    > 311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
          |                       ^^^^^^
      312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
      313 |             </Select>
      314 |           </div>

  ERROR in src/renderer/components/Settings.tsx:311:74
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      309 |               disabled={isLoading}
      310 |             >
    > 311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
          |                                                                          ^^^^^^
      312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
      313 |             </Select>
      314 |           </div>

  ERROR in src/renderer/components/Settings.tsx:312:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
    > 312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
          |                       ^^^^^^
      313 |             </Select>
      314 |           </div>
      315 |         </CardContent>

  ERROR in src/renderer/components/Settings.tsx:312:72
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      310 |             >
      311 |               <Select.Option value="light">{t('settings.light')}</Select.Option>
    > 312 |               <Select.Option value="dark">{t('settings.dark')}</Select.Option>
          |                                                                        ^^^^^^
      313 |             </Select>
      314 |           </div>
      315 |         </CardContent>

  ERROR in src/renderer/components/Settings.tsx:328:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      326 |               id="guaranteeText"
      327 |               value={settings.guaranteeText}
    > 328 |               onChange={(e) => handleChange('guaranteeText', e.target.value)}
          |                          ^
      329 |               placeholder={t('settings.guaranteeTextPlaceholder')}
      330 |               disabled={isLoading}
      331 |             />

  ERROR in src/renderer/components/Settings.tsx:338:26
  TS7006: Parameter 'e' implicitly has an 'any' type.
      336 |               id="invoiceCustomMessage"
      337 |               value={settings.invoiceCustomMessage}
    > 338 |               onChange={(e) => handleChange('invoiceCustomMessage', e.target.value)}
          |                          ^
      339 |               placeholder={t('settings.invoiceCustomMessagePlaceholder')}
      340 |               disabled={isLoading}
      341 |             />

  ERROR in src/renderer/components/SubscriptionSystem.tsx:7:70
  TS2307: Cannot find module './ui/card' or its corresponding type declarations.
       5 | import { Select } from './ui/select';
       6 | import { toast } from './ui/toast';
    >  7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
         |                                                                      ^^^^^^^^^^^
       8 | import { Label } from './ui/label';
       9 | import { Subscription } from '../../shared/types/subscription';
      10 | import { Customer } from '../../shared/types/customer';

  ERROR in src/renderer/components/SubscriptionSystem.tsx:8:23
  TS2307: Cannot find module './ui/label' or its corresponding type declarations.
       6 | import { toast } from './ui/toast';
       7 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';
    >  8 | import { Label } from './ui/label';
         |                       ^^^^^^^^^^^^
       9 | import { Subscription } from '../../shared/types/subscription';
      10 | import { Customer } from '../../shared/types/customer';
      11 |

  ERROR in src/renderer/components/SubscriptionSystem.tsx:54:9
  TS2322: Type 'string' is not assignable to type 'PlanType'.
      52 |       const subscription: Subscription = {
      53 |         customerId: parseInt(selectedCustomerId, 10),
    > 54 |         planType,
         |         ^^^^^^^^
      55 |         startDate: new Date(startDate),
      56 |         endDate: new Date(endDate),
      57 |         status: 'active',

  ERROR in src/renderer/components/SubscriptionSystem.tsx:98:13
  TS2322: Type '{ children: (Element | Element[])[]; id: string; value: string; onValueChange: Dispatch<SetStateAction<string>>; disabled: boolean; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
       96 |             id="customer"
       97 |             value={selectedCustomerId}
    >  98 |             onValueChange={setSelectedCustomerId}
          |             ^^^^^^^^^^^^^
       99 |             disabled={isLoading}
      100 |           >
      101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:101:21
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |             disabled={isLoading}
      100 |           >
    > 101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
          |                     ^^^^^^
      102 |             {customers.map((customer) => (
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:101:81
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
       99 |             disabled={isLoading}
      100 |           >
    > 101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
          |                                                                                 ^^^^^^
      102 |             {customers.map((customer) => (
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:103:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      101 |             <Select.Option value="">{t('subscriptions.selectCustomer')}</Select.Option>
      102 |             {customers.map((customer) => (
    > 103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
          |                       ^^^^^^
      104 |                 {customer.name}
      105 |               </Select.Option>
      106 |             ))}

  ERROR in src/renderer/components/SubscriptionSystem.tsx:105:24
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      103 |               <Select.Option key={customer.id} value={customer.id.toString()}>
      104 |                 {customer.name}
    > 105 |               </Select.Option>
          |                        ^^^^^^
      106 |             ))}
      107 |           </Select>
      108 |         </div>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:114:44
  TS2339: Property 'target' does not exist on type 'string'.
      112 |             id="planType"
      113 |             value={planType}
    > 114 |             onChange={(e) => setPlanType(e.target.value)}
          |                                            ^^^^^^
      115 |             placeholder={t('subscriptions.planTypePlaceholder')}
      116 |             disabled={isLoading}
      117 |           />

  ERROR in src/renderer/components/SubscriptionSystem.tsx:125:45
  TS2339: Property 'target' does not exist on type 'string'.
      123 |             type="date"
      124 |             value={startDate}
    > 125 |             onChange={(e) => setStartDate(e.target.value)}
          |                                             ^^^^^^
      126 |             disabled={isLoading}
      127 |           />
      128 |         </div>

  ERROR in src/renderer/components/SubscriptionSystem.tsx:135:43
  TS2339: Property 'target' does not exist on type 'string'.
      133 |             type="date"
      134 |             value={endDate}
    > 135 |             onChange={(e) => setEndDate(e.target.value)}
          |                                           ^^^^^^
      136 |             disabled={isLoading}
      137 |           />
      138 |         </div>

  ERROR in src/renderer/components/ui/select.tsx:32:8
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      30 | }) => <option {...props}>{children}</option>;
      31 |
    > 32 | Select.Option = Option;
         |        ^^^^^^
      33 |

  ERROR in src/renderer/pages/Dashboard.tsx:4:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      2 | import { useTranslation } from 'react-i18next';
      3 | import { Link } from 'react-router-dom';
    > 4 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
        |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      5 | import { Button } from '../components/ui/button';
      6 | import { Skeleton } from '../components/ui/skeleton';
      7 | import { toast } from '../components/ui/toast';

  ERROR in src/renderer/pages/Dashboard.tsx:6:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      4 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
      5 | import { Button } from '../components/ui/button';
    > 6 | import { Skeleton } from '../components/ui/skeleton';
        |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      7 | import { toast } from '../components/ui/toast';
      8 | import { DollarSign, Package, BarChart2, ShoppingCart, Box, FileText } from 'lucide-react';
      9 |

  ERROR in src/renderer/pages/Dashboard.tsx:8:77
  TS2307: Cannot find module 'lucide-react' or its corresponding type declarations.
       6 | import { Skeleton } from '../components/ui/skeleton';
       7 | import { toast } from '../components/ui/toast';
    >  8 | import { DollarSign, Package, BarChart2, ShoppingCart, Box, FileText } from 'lucide-react';
         |                                                                             ^^^^^^^^^^^^^^
       9 |
      10 | interface DashboardSummary {
      11 |   totalSales: number;

  ERROR in src/renderer/pages/Dashboard.tsx:151:21
  TS2322: Type '{ children: Element; asChild: true; className: string; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
    Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonProps'.
      149 |           </CardHeader>
      150 |           <CardContent className="space-y-2">
    > 151 |             <Button asChild className="w-full">
          |                     ^^^^^^^
      152 |               <Link to="/sales">
      153 |                 <ShoppingCart className="mr-2 h-4 w-4" />
      154 |                 {t('dashboard.newSale')}

  ERROR in src/renderer/pages/Dashboard.tsx:157:21
  TS2322: Type '{ children: Element; asChild: true; variant: "secondary"; className: string; }' is not assignable to type 'IntrinsicAttributes & ButtonProps'.
    Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonProps'.
      155 |               </Link>
      156 |             </Button>
    > 157 |             <Button asChild variant="secondary" className="w-full">
          |                     ^^^^^^^
      158 |               <Link to="/inventory">
      159 |                 <Box className="mr-2 h-4 w-4" />
      160 |                 {t('dashboard.manageInventory')}

  ERROR in src/renderer/pages/Dashboard.tsx:163:29
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      161 |               </Link>
      162 |             </Button>
    > 163 |             <Button asChild variant="outline" className="w-full">
          |                             ^^^^^^^
      164 |               <Link to="/reports">
      165 |                 <FileText className="mr-2 h-4 w-4" />
      166 |                 {t('dashboard.viewReports')}

  ERROR in src/renderer/pages/Inventory.tsx:12:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      10 | import { Button } from '../components/ui/button';
      11 | import { Input } from '../components/ui/input';
    > 12 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      13 | import {
      14 |   Table,
      15 |   TableBody,

  ERROR in src/renderer/pages/Inventory.tsx:20:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      18 |   TableHeader,
      19 |   TableRow,
    > 20 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      21 | import { toast } from '../components/ui/toast';
      22 | import {
      23 |   Dialog,

  ERROR in src/renderer/pages/Inventory.tsx:24:3
  TS6133: 'DialogTrigger' is declared but its value is never read.
      22 | import {
      23 |   Dialog,
    > 24 |   DialogTrigger,
         |   ^^^^^^^^^^^^^
      25 |   DialogContent,
      26 |   DialogHeader,
      27 |   DialogTitle,

  ERROR in src/renderer/pages/Inventory.tsx:30:8
  TS2307: Cannot find module '../components/ui/dialog' or its corresponding type declarations.
      28 |   DialogDescription,
      29 |   DialogFooter,
    > 30 | } from '../components/ui/dialog';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^^
      31 | import { Label } from '../components/ui/label';
      32 | import { Skeleton } from '../components/ui/skeleton';
      33 |

  ERROR in src/renderer/pages/Inventory.tsx:31:23
  TS2307: Cannot find module '../components/ui/label' or its corresponding type declarations.
      29 |   DialogFooter,
      30 | } from '../components/ui/dialog';
    > 31 | import { Label } from '../components/ui/label';
         |                       ^^^^^^^^^^^^^^^^^^^^^^^^
      32 | import { Skeleton } from '../components/ui/skeleton';
      33 |
      34 | const Inventory: React.FC = () => {

  ERROR in src/renderer/pages/Inventory.tsx:32:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      30 | } from '../components/ui/dialog';
      31 | import { Label } from '../components/ui/label';
    > 32 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      33 |
      34 | const Inventory: React.FC = () => {
      35 |   const { t } = useTranslation();

  ERROR in src/renderer/pages/Inventory.tsx:127:17
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      125 |                 id="name"
      126 |                 name="name"
    > 127 |                 value={newProduct.name}
          |                 ^^^^^
      128 |                 onChange={(e) => handleInputChange('name', e.target.value)}
      129 |                 placeholder={t('inventory.productNamePlaceholder')}
      130 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:128:62
  TS2339: Property 'target' does not exist on type 'string'.
      126 |                 name="name"
      127 |                 value={newProduct.name}
    > 128 |                 onChange={(e) => handleInputChange('name', e.target.value)}
          |                                                              ^^^^^^
      129 |                 placeholder={t('inventory.productNamePlaceholder')}
      130 |                 required
      131 |               />

  ERROR in src/renderer/pages/Inventory.tsx:139:17
  TS2322: Type 'number | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      137 |                 name="price"
      138 |                 type="number"
    > 139 |                 value={newProduct.price}
          |                 ^^^^^
      140 |                 onChange={(e) => handleInputChange('price', parseFloat(e.target.value))}
      141 |                 placeholder={t('inventory.pricePlaceholder')}
      142 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:140:74
  TS2339: Property 'target' does not exist on type 'string'.
      138 |                 type="number"
      139 |                 value={newProduct.price}
    > 140 |                 onChange={(e) => handleInputChange('price', parseFloat(e.target.value))}
          |                                                                          ^^^^^^
      141 |                 placeholder={t('inventory.pricePlaceholder')}
      142 |                 required
      143 |               />

  ERROR in src/renderer/pages/Inventory.tsx:151:17
  TS2322: Type 'number | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      149 |                 name="stock"
      150 |                 type="number"
    > 151 |                 value={newProduct.stock}
          |                 ^^^^^
      152 |                 onChange={(e) => handleInputChange('stock', parseInt(e.target.value))}
      153 |                 placeholder={t('inventory.stockPlaceholder')}
      154 |                 required

  ERROR in src/renderer/pages/Inventory.tsx:152:72
  TS2339: Property 'target' does not exist on type 'string'.
      150 |                 type="number"
      151 |                 value={newProduct.stock}
    > 152 |                 onChange={(e) => handleInputChange('stock', parseInt(e.target.value))}
          |                                                                        ^^^^^^
      153 |                 placeholder={t('inventory.stockPlaceholder')}
      154 |                 required
      155 |               />

  ERROR in src/renderer/pages/Inventory.tsx:162:17
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      160 |                 id="barcode"
      161 |                 name="barcode"
    > 162 |                 value={newProduct.barcode}
          |                 ^^^^^
      163 |                 onChange={(e) => handleInputChange('barcode', e.target.value)}
      164 |                 placeholder={t('inventory.barcodePlaceholder')}
      165 |               />

  ERROR in src/renderer/pages/Inventory.tsx:163:65
  TS2339: Property 'target' does not exist on type 'string'.
      161 |                 name="barcode"
      162 |                 value={newProduct.barcode}
    > 163 |                 onChange={(e) => handleInputChange('barcode', e.target.value)}
          |                                                                 ^^^^^^
      164 |                 placeholder={t('inventory.barcodePlaceholder')}
      165 |               />
      166 |             </div>

  ERROR in src/renderer/pages/Inventory.tsx:209:79
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      207 |                         {t('inventory.edit')}
      208 |                       </Button>
    > 209 |                       <Button onClick={() => handleDeleteProduct(product.id)} variant="destructive">
          |                                                                               ^^^^^^^
      210 |                         {t('inventory.delete')}
      211 |                       </Button>
      212 |                     </TableCell>

  ERROR in src/renderer/pages/Inventory.tsx:240:83
  TS2339: Property 'target' does not exist on type 'string'.
      238 |                   id="edit-name"
      239 |                   value={editingProduct.name}
    > 240 |                   onChange={(e) => setEditingProduct({ ...editingProduct, name: e.target.value })}
          |                                                                                   ^^^^^^
      241 |                   required
      242 |                 />
      243 |               </div>

  ERROR in src/renderer/pages/Inventory.tsx:249:19
  TS2322: Type 'number' is not assignable to type 'string'.
      247 |                   id="edit-price"
      248 |                   type="number"
    > 249 |                   value={editingProduct.price}
          |                   ^^^^^
      250 |                   onChange={(e) =>
      251 |                     setEditingProduct({ ...editingProduct, price: parseFloat(e.target.value) })
      252 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:251:80
  TS2339: Property 'target' does not exist on type 'string'.
      249 |                   value={editingProduct.price}
      250 |                   onChange={(e) =>
    > 251 |                     setEditingProduct({ ...editingProduct, price: parseFloat(e.target.value) })
          |                                                                                ^^^^^^
      252 |                   }
      253 |                   required
      254 |                 />

  ERROR in src/renderer/pages/Inventory.tsx:261:19
  TS2322: Type 'number' is not assignable to type 'string'.
      259 |                   id="edit-stock"
      260 |                   type="number"
    > 261 |                   value={editingProduct.stock}
          |                   ^^^^^
      262 |                   onChange={(e) =>
      263 |                     setEditingProduct({ ...editingProduct, stock: parseInt(e.target.value) })
      264 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:263:78
  TS2339: Property 'target' does not exist on type 'string'.
      261 |                   value={editingProduct.stock}
      262 |                   onChange={(e) =>
    > 263 |                     setEditingProduct({ ...editingProduct, stock: parseInt(e.target.value) })
          |                                                                              ^^^^^^
      264 |                   }
      265 |                   required
      266 |                 />

  ERROR in src/renderer/pages/Inventory.tsx:272:19
  TS2322: Type 'string | undefined' is not assignable to type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      270 |                 <Input
      271 |                   id="edit-barcode"
    > 272 |                   value={editingProduct.barcode}
          |                   ^^^^^
      273 |                   onChange={(e) =>
      274 |                     setEditingProduct({ ...editingProduct, barcode: e.target.value })
      275 |                   }

  ERROR in src/renderer/pages/Inventory.tsx:274:71
  TS2339: Property 'target' does not exist on type 'string'.
      272 |                   value={editingProduct.barcode}
      273 |                   onChange={(e) =>
    > 274 |                     setEditingProduct({ ...editingProduct, barcode: e.target.value })
          |                                                                       ^^^^^^
      275 |                   }
      276 |                 />
      277 |               </div>

  ERROR in src/renderer/pages/Reports.tsx:9:31
  TS2305: Module '"../../database/productService"' has no exported member 'getTopSellingProducts'.
       7 |   getYearlySales,
       8 | } from '../../database/salesService';
    >  9 | import { getLowStockProducts, getTopSellingProducts } from '../../database/productService';
         |                               ^^^^^^^^^^^^^^^^^^^^^
      10 | import { Product } from '../../shared/types/product';
      11 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
      12 | import {

  ERROR in src/renderer/pages/Reports.tsx:11:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
       9 | import { getLowStockProducts, getTopSellingProducts } from '../../database/productService';
      10 | import { Product } from '../../shared/types/product';
    > 11 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      12 | import {
      13 |   Table,
      14 |   TableBody,

  ERROR in src/renderer/pages/Reports.tsx:19:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      17 |   TableHeader,
      18 |   TableRow,
    > 19 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      20 | import { Skeleton } from '../components/ui/skeleton';
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';

  ERROR in src/renderer/pages/Reports.tsx:20:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      18 |   TableRow,
      19 | } from '../components/ui/table';
    > 20 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';
      23 | import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

  ERROR in src/renderer/pages/Reports.tsx:23:90
  TS2307: Cannot find module 'recharts' or its corresponding type declarations.
      21 | import { toast } from '../components/ui/toast';
      22 | import { Select } from '../components/ui/select';
    > 23 | import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
         |                                                                                          ^^^^^^^^^^
      24 |
      25 | interface SalesData {
      26 |   count: number;

  ERROR in src/renderer/pages/Reports.tsx:76:9
  TS6133: 'formatCurrency' is declared but its value is never read.
      74 |   }, [fetchReportData]);
      75 |
    > 76 |   const formatCurrency = (amount: number) => {
         |         ^^^^^^^^^^^^^^
      77 |     return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
      78 |   };
      79 |

  ERROR in src/renderer/pages/Reports.tsx:175:11
  TS2322: Type '{ children: Element[]; value: "sales" | "inventory"; onValueChange: (value: "sales" | "inventory") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      173 |         <Select
      174 |           value={selectedReport}
    > 175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
          |           ^^^^^^^^^^^^^
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>

  ERROR in src/renderer/pages/Reports.tsx:177:19
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
      176 |         >
    > 177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
          |                   ^^^^^^
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
      179 |         </Select>
      180 |       </div>

  ERROR in src/renderer/pages/Reports.tsx:177:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      175 |           onValueChange={(value: 'sales' | 'inventory') => setSelectedReport(value)}
      176 |         >
    > 177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
          |                                                                           ^^^^^^
      178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
      179 |         </Select>
      180 |       </div>

  ERROR in src/renderer/pages/Reports.tsx:178:19
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
    > 178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
          |                   ^^^^^^
      179 |         </Select>
      180 |       </div>
      181 |

  ERROR in src/renderer/pages/Reports.tsx:178:83
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      176 |         >
      177 |           <Select.Option value="sales">{t('reports.salesReport')}</Select.Option>
    > 178 |           <Select.Option value="inventory">{t('reports.inventoryReport')}</Select.Option>
          |                                                                                   ^^^^^^
      179 |         </Select>
      180 |       </div>
      181 |

  ERROR in src/renderer/pages/Sales.tsx:13:58
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
      11 | import { Button } from '../components/ui/button';
      12 | import { Select } from '../components/ui/select';
    > 13 | import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
         |                                                          ^^^^^^^^^^^^^^^^^^^^^^^
      14 | import {
      15 |   Table,
      16 |   TableBody,

  ERROR in src/renderer/pages/Sales.tsx:21:8
  TS2307: Cannot find module '../components/ui/table' or its corresponding type declarations.
      19 |   TableHeader,
      20 |   TableRow,
    > 21 | } from '../components/ui/table';
         |        ^^^^^^^^^^^^^^^^^^^^^^^^
      22 | import { Input } from '../components/ui/input';
      23 | import { Skeleton } from '../components/ui/skeleton';
      24 |

  ERROR in src/renderer/pages/Sales.tsx:23:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      21 | } from '../components/ui/table';
      22 | import { Input } from '../components/ui/input';
    > 23 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      24 |
      25 | const Sales: React.FC = () => {
      26 |   const { t } = useTranslation();

  ERROR in src/renderer/pages/Sales.tsx:49:19
  TS2345: Argument of type 'Settings' is not assignable to parameter of type 'SetStateAction<Settings | null>'.
    Type 'Settings' is missing the following properties from type 'Settings': id, createdAt, timeZone, dateFormat, and 3 more.
      47 |     try {
      48 |       const fetchedSettings = await getSettings();
    > 49 |       setSettings(fetchedSettings);
         |                   ^^^^^^^^^^^^^^^
      50 |     } catch (error) {
      51 |       console.error('Error fetching settings:', error);
      52 |       toast.error(t('sales.fetchSettingsError'));

  ERROR in src/renderer/pages/Sales.tsx:71:65
  TS2339: Property 'taxAmount' does not exist on type 'SaleItem'.
      69 |   const calculateTotals = useCallback(() => {
      70 |     const calculatedSubtotal = cart.reduce((sum, item) => sum + item.subtotal, 0);
    > 71 |     const calculatedTax = cart.reduce((sum, item) => sum + item.taxAmount, 0);
         |                                                                 ^^^^^^^^^
      72 |     setSubtotal(calculatedSubtotal);
      73 |     setTax(calculatedTax);
      74 |     setTotal(calculatedSubtotal + calculatedTax);

  ERROR in src/renderer/pages/Sales.tsx:139:13
  TS2353: Object literal may only specify known properties, and 'createdAt' does not exist in type 'SaleItem'.
      137 |             ...totals,
      138 |             tax: totals.taxAmount,
    > 139 |             createdAt: new Date(),
          |             ^^^^^^^^^
      140 |             updatedAt: new Date(),
      141 |           };
      142 |

  ERROR in src/renderer/pages/Sales.tsx:198:13
  TS2739: Type '{ total: number; subtotal: number; tax: number; paymentMethod: "cash" | "card"; items: SaleItem[]; createdAt: Date; }' is missing the following properties from type 'Sale': id, customerId, status
      196 |   const completeSale = useCallback(async () => {
      197 |     try {
    > 198 |       const sale: Sale = {
          |             ^^^^
      199 |         total,
      200 |         subtotal,
      201 |         tax,

  ERROR in src/renderer/pages/Sales.tsx:207:13
  TS6133: 'invoice' is declared but its value is never read.
      205 |       };
      206 |       const saleId = await createSale(sale);
    > 207 |       const invoice = await generateInvoice(saleId);
          |             ^^^^^^^
      208 |       console.log('Sale completed with ID:', saleId);
      209 |       toast.success(t('sales.saleCompleted'));
      210 |       // TODO: Implement invoice printing

  ERROR in src/renderer/pages/Sales.tsx:283:31
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      281 |                           <div className="flex items-center space-x-2">
      282 |                             <Button
    > 283 |                               variant="outline"
          |                               ^^^^^^^
      284 |                               size="sm"
      285 |                               onClick={() => updateQuantity(item.productId, item.quantity - 1)}
      286 |                             >

  ERROR in src/renderer/pages/Sales.tsx:291:31
  TS2322: Type 'number' is not assignable to type 'string'.
      289 |                             <Input
      290 |                               type="number"
    > 291 |                               value={item.quantity}
          |                               ^^^^^
      292 |                               onChange={(e) =>
      293 |                                 updateQuantity(item.productId, parseInt(e.target.value))
      294 |                               }

  ERROR in src/renderer/pages/Sales.tsx:293:75
  TS2339: Property 'target' does not exist on type 'string'.
      291 |                               value={item.quantity}
      292 |                               onChange={(e) =>
    > 293 |                                 updateQuantity(item.productId, parseInt(e.target.value))
          |                                                                           ^^^^^^
      294 |                               }
      295 |                               className="w-16 text-center"
      296 |                             />

  ERROR in src/renderer/pages/Sales.tsx:298:31
  TS2322: Type '"outline"' is not assignable to type '"primary" | "secondary"'.
      296 |                             />
      297 |                             <Button
    > 298 |                               variant="outline"
          |                               ^^^^^^^
      299 |                               size="sm"
      300 |                               onClick={() => updateQuantity(item.productId, item.quantity + 1)}
      301 |                             >

  ERROR in src/renderer/pages/Sales.tsx:316:29
  TS2322: Type '"destructive"' is not assignable to type '"primary" | "secondary"'.
      314 |                         <TableCell>
      315 |                           <Button
    > 316 |                             variant="destructive"
          |                             ^^^^^^^
      317 |                             size="sm"
      318 |                             onClick={() => removeFromCart(item.productId)}
      319 |                           >

  ERROR in src/renderer/pages/Sales.tsx:350:21
  TS2322: Type '{ children: Element[]; id: string; value: "cash" | "card"; onValueChange: (value: "cash" | "card") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      348 |                     id="paymentMethod"
      349 |                     value={paymentMethod}
    > 350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
          |                     ^^^^^^^^^^^^^
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>

  ERROR in src/renderer/pages/Sales.tsx:352:29
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
      351 |                   >
    > 352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                             ^^^^^^
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
      354 |                   </Select>
      355 |                 </div>

  ERROR in src/renderer/pages/Sales.tsx:352:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      350 |                     onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}
      351 |                   >
    > 352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
          |                                                                           ^^^^^^
      353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
      354 |                   </Select>
      355 |                 </div>

  ERROR in src/renderer/pages/Sales.tsx:353:29
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                             ^^^^^^
      354 |                   </Select>
      355 |                 </div>
      356 |                 <Button onClick={completeSale} className="w-full">

  ERROR in src/renderer/pages/Sales.tsx:353:75
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      351 |                   >
      352 |                     <Select.Option value="cash">{t('sales.cash')}</Select.Option>
    > 353 |                     <Select.Option value="card">{t('sales.card')}</Select.Option>
          |                                                                           ^^^^^^
      354 |                   </Select>
      355 |                 </div>
      356 |                 <Button onClick={completeSale} className="w-full">

  ERROR in src/renderer/pages/Settings.tsx:9:26
  TS2307: Cannot find module '../components/ui/checkbox' or its corresponding type declarations.
       7 | import { Input } from '../components/ui/input';
       8 | import { Select } from '../components/ui/select';
    >  9 | import { Checkbox } from '../components/ui/checkbox';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
      11 | import { Label } from '../components/ui/label';
      12 | import { Skeleton } from '../components/ui/skeleton';

  ERROR in src/renderer/pages/Settings.tsx:10:70
  TS2307: Cannot find module '../components/ui/card' or its corresponding type declarations.
       8 | import { Select } from '../components/ui/select';
       9 | import { Checkbox } from '../components/ui/checkbox';
    > 10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
         |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^
      11 | import { Label } from '../components/ui/label';
      12 | import { Skeleton } from '../components/ui/skeleton';
      13 |

  ERROR in src/renderer/pages/Settings.tsx:11:23
  TS2307: Cannot find module '../components/ui/label' or its corresponding type declarations.
       9 | import { Checkbox } from '../components/ui/checkbox';
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
    > 11 | import { Label } from '../components/ui/label';
         |                       ^^^^^^^^^^^^^^^^^^^^^^^^
      12 | import { Skeleton } from '../components/ui/skeleton';
      13 |
      14 | interface Settings {

  ERROR in src/renderer/pages/Settings.tsx:12:26
  TS2307: Cannot find module '../components/ui/skeleton' or its corresponding type declarations.
      10 | import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../components/ui/card';
      11 | import { Label } from '../components/ui/label';
    > 12 | import { Skeleton } from '../components/ui/skeleton';
         |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      13 |
      14 | interface Settings {
      15 |   businessName: string;

  ERROR in src/renderer/pages/Settings.tsx:44:19
  TS2345: Argument of type 'Settings' is not assignable to parameter of type 'SetStateAction<Settings>'.
    Property 'useBarcode' is missing in type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings' but required in type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/renderer/pages/Settings").default'.
      42 |       setIsLoading(true);
      43 |       const fetchedSettings = await getSettings();
    > 44 |       setSettings(fetchedSettings);
         |                   ^^^^^^^^^^^^^^^
      45 |     } catch (error) {
      46 |       console.error('Error fetching settings:', error);
      47 |       toast.error(t('settings.fetchError'));

  ERROR in src/renderer/pages/Settings.tsx:65:28
  TS2345: Argument of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/renderer/pages/Settings").default' is not assignable to parameter of type 'import("/Users/david/Takk/Hub/projects/freedom-pos/src/database/settingsService").Settings'.
    Type 'Settings' is missing the following properties from type 'Settings': printerType, printerName, useCashDrawer, cashDrawerPort
      63 |     try {
      64 |       setIsSaving(true);
    > 65 |       await updateSettings(settings);
         |                            ^^^^^^^^
      66 |       toast.success(t('settings.saveSuccess'));
      67 |     } catch (error) {
      68 |       console.error('Error updating settings:', error);

  ERROR in src/renderer/pages/Settings.tsx:98:68
  TS2339: Property 'target' does not exist on type 'string'.
       96 |               id="businessName"
       97 |               value={settings.businessName}
    >  98 |               onChange={(e) => handleInputChange('businessName', e.target.value)}
          |                                                                    ^^^^^^
       99 |               required
      100 |             />
      101 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:107:71
  TS2339: Property 'target' does not exist on type 'string'.
      105 |               id="businessAddress"
      106 |               value={settings.businessAddress}
    > 107 |               onChange={(e) => handleInputChange('businessAddress', e.target.value)}
          |                                                                       ^^^^^^
      108 |               required
      109 |             />
      110 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:127:15
  TS2322: Type 'number' is not assignable to type 'string'.
      125 |               max="100"
      126 |               step="0.01"
    > 127 |               value={settings.taxRate}
          |               ^^^^^
      128 |               onChange={(e) => handleInputChange('taxRate', parseFloat(e.target.value))}
      129 |               required
      130 |             />

  ERROR in src/renderer/pages/Settings.tsx:128:74
  TS2339: Property 'target' does not exist on type 'string'.
      126 |               step="0.01"
      127 |               value={settings.taxRate}
    > 128 |               onChange={(e) => handleInputChange('taxRate', parseFloat(e.target.value))}
          |                                                                          ^^^^^^
      129 |               required
      130 |             />
      131 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:137:15
  TS2322: Type '{ children: Element[]; id: string; value: string; onValueChange: (value: any) => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      135 |               id="currency"
      136 |               value={settings.currency}
    > 137 |               onValueChange={(value) => handleInputChange('currency', value)}
          |               ^^^^^^^^^^^^^
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:137:31
  TS7006: Parameter 'value' implicitly has an 'any' type.
      135 |               id="currency"
      136 |               value={settings.currency}
    > 137 |               onValueChange={(value) => handleInputChange('currency', value)}
          |                               ^^^^^
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:139:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      137 |               onValueChange={(value) => handleInputChange('currency', value)}
      138 |             >
    > 139 |               <Select.Option value="USD">USD</Select.Option>
          |                       ^^^^^^
      140 |               <Select.Option value="EUR">EUR</Select.Option>
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}

  ERROR in src/renderer/pages/Settings.tsx:139:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      137 |               onValueChange={(value) => handleInputChange('currency', value)}
      138 |             >
    > 139 |               <Select.Option value="USD">USD</Select.Option>
          |                                                      ^^^^^^
      140 |               <Select.Option value="EUR">EUR</Select.Option>
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}

  ERROR in src/renderer/pages/Settings.tsx:140:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
    > 140 |               <Select.Option value="EUR">EUR</Select.Option>
          |                       ^^^^^^
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>

  ERROR in src/renderer/pages/Settings.tsx:140:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      138 |             >
      139 |               <Select.Option value="USD">USD</Select.Option>
    > 140 |               <Select.Option value="EUR">EUR</Select.Option>
          |                                                      ^^^^^^
      141 |               <Select.Option value="GBP">GBP</Select.Option>
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>

  ERROR in src/renderer/pages/Settings.tsx:141:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>
    > 141 |               <Select.Option value="GBP">GBP</Select.Option>
          |                       ^^^^^^
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>
      144 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:141:54
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      139 |               <Select.Option value="USD">USD</Select.Option>
      140 |               <Select.Option value="EUR">EUR</Select.Option>
    > 141 |               <Select.Option value="GBP">GBP</Select.Option>
          |                                                      ^^^^^^
      142 |               {/* Add more currency options as needed */}
      143 |             </Select>
      144 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:163:15
  TS2322: Type 'number' is not assignable to type 'string'.
      161 |               type="number"
      162 |               min="0"
    > 163 |               value={settings.lowStockThreshold}
          |               ^^^^^
      164 |               onChange={(e) => handleInputChange('lowStockThreshold', parseInt(e.target.value))}
      165 |               required
      166 |             />

  ERROR in src/renderer/pages/Settings.tsx:164:82
  TS2339: Property 'target' does not exist on type 'string'.
      162 |               min="0"
      163 |               value={settings.lowStockThreshold}
    > 164 |               onChange={(e) => handleInputChange('lowStockThreshold', parseInt(e.target.value))}
          |                                                                                  ^^^^^^
      165 |               required
      166 |             />
      167 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:173:15
  TS2322: Type '{ children: Element[]; id: string; value: "light" | "dark"; onValueChange: (value: "light" | "dark") => void; }' is not assignable to type 'IntrinsicAttributes & SelectProps'.
    Property 'onValueChange' does not exist on type 'IntrinsicAttributes & SelectProps'. Did you mean 'onVolumeChange'?
      171 |               id="theme"
      172 |               value={settings.theme}
    > 173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
          |               ^^^^^^^^^^^^^
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>

  ERROR in src/renderer/pages/Settings.tsx:175:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
      174 |             >
    > 175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
          |                       ^^^^^^
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
      177 |             </Select>
      178 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:175:79
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      173 |               onValueChange={(value: 'light' | 'dark') => handleInputChange('theme', value)}
      174 |             >
    > 175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
          |                                                                               ^^^^^^
      176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
      177 |             </Select>
      178 |           </div>

  ERROR in src/renderer/pages/Settings.tsx:176:23
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
    > 176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
          |                       ^^^^^^
      177 |             </Select>
      178 |           </div>
      179 |           <div className="flex items-center space-x-2">

  ERROR in src/renderer/pages/Settings.tsx:176:77
  TS2339: Property 'Option' does not exist on type 'FC<SelectProps>'.
      174 |             >
      175 |               <Select.Option value="light">{t('settings.lightTheme')}</Select.Option>
    > 176 |               <Select.Option value="dark">{t('settings.darkTheme')}</Select.Option>
          |                                                                             ^^^^^^
      177 |             </Select>
      178 |           </div>
      179 |           <div className="flex items-center space-x-2">

  ERROR in src/renderer/pages/Settings.tsx:183:33
  TS7006: Parameter 'checked' implicitly has an 'any' type.
      181 |               id="useBarcode"
      182 |               checked={settings.useBarcode}
    > 183 |               onCheckedChange={(checked) => handleInputChange('useBarcode', checked)}
          |                                 ^^^^^^^
      184 |             />
      185 |             <Label htmlFor="useBarcode">{t('settings.useBarcode')}</Label>
      186 |           </div>

  ERROR in src/utils/barcodeGenerator.ts:25:28
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      23 |   let sum = 0;
      24 |   for (let i = 0; i < 12; i++) {
    > 25 |     const digit = parseInt(value[i]);
         |                            ^^^^^^^^
      26 |     sum += i % 2 === 0 ? digit * 1 : digit * 3;
      27 |   }
      28 |

  ERROR in src/utils/barcodeGenerator.ts:45:28
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      43 |   let sum = 0;
      44 |   for (let i = 0; i < 11; i++) {
    > 45 |     const digit = parseInt(value[i]);
         |                            ^^^^^^^^
      46 |     sum += i % 2 === 0 ? digit * 3 : digit;
      47 |   }
      48 |

  ERROR in src/utils/barcodeGenerator.ts:107:22
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      105 |       try {
      106 |         const checkDigit = calculateEAN13CheckDigit(value.slice(0, 12));
    > 107 |         if (parseInt(value[12]) !== checkDigit) {
          |                      ^^^^^^^^^
      108 |           return {
      109 |             isValid: false,
      110 |             message: 'Invalid EAN-13 check digit',

  ERROR in src/utils/barcodeGenerator.ts:129:22
  TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    Type 'undefined' is not assignable to type 'string'.
      127 |       try {
      128 |         const checkDigit = calculateUPCCheckDigit(value.slice(0, 11));
    > 129 |         if (parseInt(value[11]) !== checkDigit) {
          |                      ^^^^^^^^^
      130 |           return {
      131 |             isValid: false,
      132 |             message: 'Invalid UPC check digit',

  ERROR in src/utils/barcodeScanner.ts:18:1
  TS2304: Cannot find name 'app'.
      16 |
      17 | // Ensure the listener is removed when the app is about to quit
    > 18 | app.on('before-quit', removeBarcodeListener);
         | ^^^
      19 |

  ERROR in src/utils/cashDrawer.ts:91:7
  TS18047: 'cashDrawer' is possibly 'null'.
      89 |       }
      90 |
    > 91 |       cashDrawer.drain((drainError) => {
         |       ^^^^^^^^^^
      92 |         if (drainError) {
      93 |           reject(new Error(`Failed to flush cash drawer buffer: ${drainError.message}`));
      94 |           return;

  ERROR in src/utils/i18n.ts:69:22
  TS4111: Property 'NODE_ENV' comes from an index signature, so it must be accessed with ['NODE_ENV'].
      67 |   defaultNS: 'translation',
      68 |   fallbackNS: 'translation',
    > 69 |   debug: process.env.NODE_ENV === 'development',
         |                      ^^^^^^^^
      70 |
      71 |   interpolation: {
      72 |     escapeValue: false,

  ERROR in src/utils/i18n.ts:173:17
  TS2379: Argument of type '[keyof TranslationKeys, object | undefined]' is not assignable to parameter of type '[key: "products" | "sales" | "customers" | "settings" | "welcome" | "inventory" | "reports" | "logout" | ("products" | "sales" | "customers" | "settings" | "welcome" | "inventory" | "reports" | "logout")[], options?: TOptionsBase & $Dictionary] | [key: string | string[], options: TOptionsBase & $Dictionary & { defaultValue: string; }] | [key: string | string[], defaultValue: string, options?: TOptionsBase & $Dictionary]' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties.
    Type '[keyof TranslationKeys, object | undefined]' is not assignable to type '[key: string | string[], defaultValue: string, options?: TOptionsBase & $Dictionary]'.
      Type at position 1 in source is not compatible with type at position 1 in target.
        Type 'object | undefined' is not assignable to type 'string'.
          Type 'undefined' is not assignable to type 'string'.
      171 |  */
      172 | export function translate(key: keyof TranslationKeys, options?: object): string {
    > 173 |   return i18n.t(key, options);
          |                 ^^^^^^^^^^^^
      174 | }
      175 |
      176 | // Export the i18n instance for use in React components

  ERROR in src/utils/i18n.ts:180:15
  TS2484: Export declaration conflicts with exported declaration of 'TranslationKeys'.
      178 |
      179 | // Type exports for use in other files
    > 180 | export type { TranslationKeys };
          |               ^^^^^^^^^^^^^^^
      181 |

  ERROR in src/utils/integrations.ts:1:57
  TS2307: Cannot find module '../integrations/types' or its corresponding type declarations.
    > 1 | import { QuickBooks, Xero, SyncResult, TokenInfo } from '../integrations/types';
        |                                                         ^^^^^^^^^^^^^^^^^^^^^^^
      2 | import { IntegrationSettings } from '../shared/types/settings';
      3 | import { getIntegrationSettings, updateIntegrationSettings } from '../database/integrationService';
      4 |

  ERROR in src/utils/integrations.ts:2:10
  TS2305: Module '"../shared/types/settings"' has no exported member 'IntegrationSettings'.
      1 | import { QuickBooks, Xero, SyncResult, TokenInfo } from '../integrations/types';
    > 2 | import { IntegrationSettings } from '../shared/types/settings';
        |          ^^^^^^^^^^^^^^^^^^^
      3 | import { getIntegrationSettings, updateIntegrationSettings } from '../database/integrationService';
      4 |
      5 | interface IntegrationInstance {

  ERROR in src/utils/integrations.ts:179:16
  TS2551: Property 'quickbooksAccessToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      177 |     const settings = await getIntegrationSettings();
      178 |     if (integrationType === 'quickbooks') {
    > 179 |       settings.quickbooksAccessToken = tokens.accessToken;
          |                ^^^^^^^^^^^^^^^^^^^^^
      180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;

  ERROR in src/utils/integrations.ts:180:16
  TS2551: Property 'quickbooksRefreshToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      178 |     if (integrationType === 'quickbooks') {
      179 |       settings.quickbooksAccessToken = tokens.accessToken;
    > 180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
          |                ^^^^^^^^^^^^^^^^^^^^^^
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;
      183 |       settings.xeroRefreshToken = tokens.refreshToken;

  ERROR in src/utils/integrations.ts:182:16
  TS2339: Property 'xeroAccessToken' does not exist on type 'IntegrationSettings'.
      180 |       settings.quickbooksRefreshToken = tokens.refreshToken;
      181 |     } else {
    > 182 |       settings.xeroAccessToken = tokens.accessToken;
          |                ^^^^^^^^^^^^^^^
      183 |       settings.xeroRefreshToken = tokens.refreshToken;
      184 |     }
      185 |     await updateIntegrationSettings(settings);

  ERROR in src/utils/integrations.ts:183:16
  TS2339: Property 'xeroRefreshToken' does not exist on type 'IntegrationSettings'.
      181 |     } else {
      182 |       settings.xeroAccessToken = tokens.accessToken;
    > 183 |       settings.xeroRefreshToken = tokens.refreshToken;
          |                ^^^^^^^^^^^^^^^^
      184 |     }
      185 |     await updateIntegrationSettings(settings);
      186 |   } catch (error) {

  ERROR in src/utils/integrations.ts:218:18
  TS2551: Property 'quickbooksAccessToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      216 |       if (integrationType === 'quickbooks') {
      217 |         settings.quickbooksEnabled = false;
    > 218 |         settings.quickbooksAccessToken = '';
          |                  ^^^^^^^^^^^^^^^^^^^^^
      219 |         settings.quickbooksRefreshToken = '';
      220 |       } else {
      221 |         settings.xeroEnabled = false;

  ERROR in src/utils/integrations.ts:219:18
  TS2551: Property 'quickbooksRefreshToken' does not exist on type 'IntegrationSettings'. Did you mean 'quickbooksTokens'?
      217 |         settings.quickbooksEnabled = false;
      218 |         settings.quickbooksAccessToken = '';
    > 219 |         settings.quickbooksRefreshToken = '';
          |                  ^^^^^^^^^^^^^^^^^^^^^^
      220 |       } else {
      221 |         settings.xeroEnabled = false;
      222 |         settings.xeroAccessToken = '';

  ERROR in src/utils/integrations.ts:222:18
  TS2339: Property 'xeroAccessToken' does not exist on type 'IntegrationSettings'.
      220 |       } else {
      221 |         settings.xeroEnabled = false;
    > 222 |         settings.xeroAccessToken = '';
          |                  ^^^^^^^^^^^^^^^
      223 |         settings.xeroRefreshToken = '';
      224 |       }
      225 |       await updateIntegrationSettings(settings);

  ERROR in src/utils/integrations.ts:223:18
  TS2339: Property 'xeroRefreshToken' does not exist on type 'IntegrationSettings'.
      221 |         settings.xeroEnabled = false;
      222 |         settings.xeroAccessToken = '';
    > 223 |         settings.xeroRefreshToken = '';
          |                  ^^^^^^^^^^^^^^^^
      224 |       }
      225 |       await updateIntegrationSettings(settings);
      226 |     } catch (error) {

  ERROR in src/utils/integrations.ts:249:15
  TS2484: Export declaration conflicts with exported declaration of 'SyncOptions'.
      247 | });
      248 |
    > 249 | export type { SyncOptions, SyncResult, TokenInfo };
          |               ^^^^^^^^^^^
      250 |

  ERROR in src/utils/printer.ts:5:3
  TS2305: Module '"node-thermal-printer"' has no exported member 'BarcodeType'.
      3 |   PrinterTypes,
      4 |   CharacterSet,
    > 5 |   BarcodeType,
        |   ^^^^^^^^^^^
      6 |   PrinterOptions,
      7 | } from 'node-thermal-printer';
      8 | import { getSettings } from '../database/settingsService';

  ERROR in src/utils/printer.ts:6:3
  TS2305: Module '"node-thermal-printer"' has no exported member 'PrinterOptions'.
      4 |   CharacterSet,
      5 |   BarcodeType,
    > 6 |   PrinterOptions,
        |   ^^^^^^^^^^^^^^
      7 | } from 'node-thermal-printer';
      8 | import { getSettings } from '../database/settingsService';
      9 |

  ERROR in src/utils/printer.ts:53:30
  TS2339: Property 'characterSet' does not exist on type 'Settings'.
      51 |       type: settings.printerType === '80mm' ? PrinterTypes.EPSON : PrinterTypes.STAR,
      52 |       interface: `printer:${settings.printerName}`,
    > 53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
         |                              ^^^^^^^^^^^^
      54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
      55 |       lineCharacter: settings.lineCharacter || '=',
      56 |       width: settings.printerType === '80mm' ? 48 : 32,

  ERROR in src/utils/printer.ts:54:41
  TS2339: Property 'removeSpecialCharacters' does not exist on type 'Settings'.
      52 |       interface: `printer:${settings.printerName}`,
      53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
    > 54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
         |                                         ^^^^^^^^^^^^^^^^^^^^^^^
      55 |       lineCharacter: settings.lineCharacter || '=',
      56 |       width: settings.printerType === '80mm' ? 48 : 32,
      57 |       encoding: 'GB18030',

  ERROR in src/utils/printer.ts:55:31
  TS2339: Property 'lineCharacter' does not exist on type 'Settings'.
      53 |       characterSet: settings.characterSet || CharacterSet.PC852_LATIN2,
      54 |       removeSpecialCharacters: settings.removeSpecialCharacters ?? false,
    > 55 |       lineCharacter: settings.lineCharacter || '=',
         |                               ^^^^^^^^^^^^^
      56 |       width: settings.printerType === '80mm' ? 48 : 32,
      57 |       encoding: 'GB18030',
      58 |       driver: process.platform === 'win32' ? 'windriver' : 'printer',

  ERROR in src/utils/printer.ts:129:7
  TS2353: Object literal may only specify known properties, and 'position' does not exist in type '{ hriPos?: number; hriFont?: number; width?: number; height?: number; }'.
      127 |       width: options.width || 2,
      128 |       height: options.height || 100,
    > 129 |       position: options.position || 'below',
          |       ^^^^^^^^
      130 |       includeText: options.includeText ?? true,
      131 |       font: options.font || 'A',
      132 |     });

  ERROR in src/utils/printer.ts:294:21
  TS2339: Property 'catch' does not exist on type 'void'.
      292 | process.on('exit', () => {
      293 |   if (printer) {
    > 294 |     printer.clear().catch(console.error);
          |                     ^^^^^
      295 |   }
      296 | });
      297 |

  ERROR in src/utils/printer.ts:298:15
  TS2484: Export declaration conflicts with exported declaration of 'PrinterSettings'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |               ^^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/printer.ts:298:32
  TS2484: Export declaration conflicts with exported declaration of 'ReceiptOptions'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |                                ^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/printer.ts:298:48
  TS2484: Export declaration conflicts with exported declaration of 'BarcodeOptions'.
      296 | });
      297 |
    > 298 | export type { PrinterSettings, ReceiptOptions, BarcodeOptions };
          |                                                ^^^^^^^^^^^^^^
      299 |

  ERROR in src/utils/userManual.ts:165:15
  TS2484: Export declaration conflicts with exported declaration of 'ManualSection'.
      163 | }
      164 |
    > 165 | export type { ManualSection, ManualContent };
          |               ^^^^^^^^^^^^^
      166 |

  ERROR in src/utils/userManual.ts:165:30
  TS2484: Export declaration conflicts with exported declaration of 'ManualContent'.
      163 | }
      164 |
    > 165 | export type { ManualSection, ManualContent };
          |                              ^^^^^^^^^^^^^
      166 |

  group_0 (webpack 5.97.1) compiled with 324 errors and 4 warnings in 11775 ms
at /Users/david/Takk/Hub/projects/freedom-pos/node_modules/@electron-forge/plugin-webpack/dist/WebpackPlugin.js:225:43
    at Hook.eval [as call] (eval at create (/Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:7:1)
    at Hook.CALL_DELEGATE [as _call] (/Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack/node_modules/tapable/lib/Hook.js:14:14)
    at /Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack/lib/MultiCompiler.js:102:22
    at _next2 (eval at create (/Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:39:1)
    at eval (eval at create (/Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:98:1)
    at Immediate.<anonymous> (/Users/david/Takk/Hub/projects/freedom-pos/node_modules/webpack-bundle-analyzer/lib/BundleAnalyzerPlugin.js:75:13)
